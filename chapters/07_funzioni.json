{
  "id": "funzioni",
  "title": "Funzioni: Blocchi di Codice Riutilizzabili",
  "explanation": "<h2>Funzioni: Organizzare e Riutilizzare il Codice</h2>\n<p>Man mano che i programmi diventano più complessi, ci ritroviamo spesso a scrivere le stesse sequenze di istruzioni in punti diversi. Le <strong>funzioni</strong> ci permettono di raggruppare un blocco di codice, dargli un nome e poi \"chiamarlo\" (eseguirlo) ogni volta che ne abbiamo bisogno, rendendo il codice più organizzato, leggibile e facile da mantenere (principio DRY: Don't Repeat Yourself - Non Ripeterti).</p>\n\n<h2>Definire una Funzione</h2>\n<p>Si definisce una funzione usando la parola chiave <code>def</code>, seguita dal nome della funzione, parentesi tonde <code>()</code> ed i due punti <code>:</code>. Il codice all'interno della funzione deve essere indentato.</p>\n<pre><code class=\"language-python\"># Definizione di una funzione semplice che stampa un saluto\ndef saluta_mondo():\n    print(\"Ciao, Mondo!\")\n    print(\"Questa è la mia prima funzione.\")</code></pre>\n<p><strong>Nomi delle Funzioni:</strong> Seguono le stesse regole dei nomi delle variabili (lettere, numeri, underscore, iniziare con lettera o underscore, case-sensitive, no parole chiave). La convenzione è usare <em>snake_case</em> (es. <code>calcola_area</code>).</p>\n\n<h2>Chiamare una Funzione</h2>\n<p>Definire una funzione non la esegue. Per eseguire il codice al suo interno, devi <strong>chiamarla</strong> scrivendo il suo nome seguito dalle parentesi tonde.</p>\n<pre><code class=\"language-python\">print(\"Sto per chiamare la funzione...\")\nsaluta_mondo() # Chiama la funzione, eseguendo i print al suo interno\nprint(\"...funzione chiamata.\")\n\n# Puoi chiamarla quante volte vuoi\nsaluta_mondo()</code></pre>\n\n<h2>Passare Informazioni: Parametri e Argomenti</h2>\n<p>Le funzioni diventano molto più potenti quando possono ricevere dati su cui lavorare. Questi dati vengono passati tramite <strong>parametri</strong> (definiti nella firma della funzione) e <strong>argomenti</strong> (i valori effettivi passati quando la funzione viene chiamata).</p>\n<pre><code class=\"language-python\"># 'nome' è un parametro della funzione saluta_persona\ndef saluta_persona(nome):\n    print(f\"Ciao, {nome}!\")\n\n# \"Mario\" e \"Giulia\" sono argomenti passati alla funzione\nsaluta_persona(\"Mario\")   # Output: Ciao, Mario!\nsaluta_persona(\"Giulia\")  # Output: Ciao, Giulia!\n\n# Funzione con più parametri\ndef somma_due_numeri(num1, num2):\n    somma = num1 + num2\n    print(f\"La somma di {num1} e {num2} è {somma}\")\n\nsomma_due_numeri(5, 3)    # Output: La somma di 5 e 3 è 8\nsomma_due_numeri(10, -2)  # Output: La somma di 10 e -2 è 8</code></pre>\n<p><strong>Parametri vs Argomenti:</strong></p>\n<ul>\n    <li>I <strong>Parametri</strong> sono le variabili elencate tra parentesi nella definizione della funzione (<code>nome</code>, <code>num1</code>, <code>num2</code> negli esempi sopra). Sono come segnaposto.</li>\n    <li>Gli <strong>Argomenti</strong> sono i valori reali passati alla funzione quando viene chiamata (<code>\"Mario\"</code>, <code>5</code>, <code>3</code> negli esempi sopra).</li>\n</ul>\n\n<h3>Argomenti Posizionali e Keyword</h3>\n<p>Quando chiami una funzione, puoi passare gli argomenti in due modi:</p>\n<ul>\n    <li><strong>Posizionali:</strong> Gli argomenti vengono assegnati ai parametri in base alla loro posizione. Il primo argomento va al primo parametro, il secondo al secondo, e così via. (Es. <code>somma_due_numeri(5, 3)</code>)</li>\n    <li><strong>Keyword:</strong> Specifichi esplicitamente a quale parametro assegnare un valore usando <code>nome_parametro=valore</code>. L'ordine non conta quando usi argomenti keyword.</li>\n</ul>\n<pre><code class=\"language-python\">def descrivi_animale(tipo_animale, nome_animale):\n    print(f\"Ho un {tipo_animale} di nome {nome_animale}.\")\n\n# Argomenti posizionali\ndescrivi_animale(\"cane\", \"Fido\")\n\n# Argomenti keyword (ordine diverso, ma funziona)\ndescrivi_animale(nome_animale=\"Luna\", tipo_animale=\"gatto\")\n\n# Misto (posizionali sempre prima dei keyword)\ndescrivi_animale(\"pesce\", nome_animale=\"Nemo\")</code></pre>\n\n<h3>Valori di Default per i Parametri</h3>\n<p>Puoi rendere un parametro opzionale fornendogli un valore di default nella definizione della funzione. Se l'argomento non viene passato durante la chiamata, verrà usato il valore di default.</p>\n<pre><code class=\"language-python\"># 'saluto' ha un valore di default\ndef saluta_con_default(nome, saluto=\"Ciao\"):\n    print(f\"{saluto}, {nome}!\")\n\nsaluta_con_default(\"Anna\") # Usa il default \"Ciao\"\n# Output: Ciao, Anna!\n\nsaluta_con_default(\"Marco\", \"Buongiorno\") # Sovrascrive il default\n# Output: Buongiorno, Marco!</code></pre>\n<p>⚠️ I parametri con valori di default devono sempre venire <strong>dopo</strong> i parametri senza valori di default nella definizione della funzione.</p>\n\n<h2>Restituire Valori: L'Istruzione <code>return</code></h2>\n<p>Spesso una funzione non si limita a stampare qualcosa, ma calcola un valore che vogliamo usare nel resto del nostro programma. L'istruzione <code>return</code> serve proprio a questo: termina l'esecuzione della funzione e restituisce un valore al punto in cui la funzione è stata chiamata.</p>\n<pre><code class=\"language-python\">def calcola_area_rettangolo(base, altezza):\n    area = base * altezza\n    return area # Restituisce il valore calcolato\n\n# Il valore restituito viene assegnato alla variabile 'area1'\narea1 = calcola_area_rettangolo(10, 5)\nprint(f\"L'area del primo rettangolo è: {area1}\")\n\narea2 = calcola_area_rettangolo(7, 3)\nprint(f\"L'area del secondo rettangolo è: {area2}\")\n\nprint(f\"La somma delle aree è: {area1 + area2}\")</code></pre>\n<p>Una funzione può avere più istruzioni <code>return</code> (ad esempio dentro un <code>if</code>/<code>else</code>), ma appena una viene eseguita, la funzione termina.</p>\n<p>Se una funzione non ha un'istruzione <code>return</code>, o raggiunge la fine senza incontrarne una, restituisce implicitamente il valore speciale <code>None</code>.</p>\n<pre><code class=\"language-python\">def funzione_senza_return(x):\n    print(f\"Ho ricevuto {x}\")\n\nrisultato = funzione_senza_return(10)\nprint(f\"Valore restituito: {risultato}\") # Output: Valore restituito: None</code></pre>\n\n<h2>Docstrings: Documentare le Funzioni</h2>\n<p>È buona pratica aggiungere una stringa multi-linea (racchiusa tra tripli apici <code>'''</code> o triple virgolette <code>\"\"\"</code>) subito dopo la riga <code>def</code> per descrivere cosa fa la funzione, i suoi parametri e cosa restituisce. Questa è chiamata <strong>docstring</strong>.</p>\n<pre><code class=\"language-python\">def calcola_media(lista_numeri):\n    \"\"\"Calcola la media di una lista di numeri.\n\n    Args:\n        lista_numeri: Una lista contenente numeri (int o float).\n\n    Returns:\n        La media dei numeri nella lista, o None se la lista è vuota.\n    \"\"\"\n    if not lista_numeri: # Gestisce lista vuota (valore Falsy)\n        return None\n    somma = sum(lista_numeri) # sum() è una funzione built-in\n    return somma / len(lista_numeri)\n\n# Puoi accedere alla docstring con help() o .__doc__\n# help(calcola_media)\nprint(calcola_media.__doc__)</code></pre>\n<p>Le funzioni sono un concetto cardine della programmazione strutturata e ti permettono di scrivere codice più pulito, modulare e manutenibile.</p>",
  "exercise": "<p>1. Definisci una funzione chiamata <code>is_pari</code> che accetta un parametro numerico <code>numero</code>.</p>\n<p>2. La funzione deve restituire <code>True</code> se il numero è pari, e <code>False</code> altrimenti (usa l'operatore modulo <code>%</code>).</p>\n<p>3. Aggiungi una docstring alla funzione che spieghi cosa fa.</p>\n<p>4. Chiama la funzione con un numero pari (es. 10) e stampa il risultato.</p>\n<p>5. Chiama la funzione con un numero dispari (es. 7) e stampa il risultato.</p>\n<p>6. (Opzionale) Definisci una seconda funzione <code>stampa_parita(num)</code> che chiama <code>is_pari(num)</code> e stampa una frase tipo \"Il numero [num] è pari.\" o \"Il numero [num] è dispari.\" a seconda del risultato.</p>",
  "defaultCode": "# 1 & 2. Definisci la funzione is_pari\ndef is_pari(numero):\n    # 3. Aggiungi la docstring\n    \"\"\"Verifica se un numero intero è pari.\n\n    Args:\n        numero: Un numero intero.\n\n    Returns:\n        True se il numero è pari, False altrimenti.\n    \"\"\"\n    return numero % 2 == 0\n\n# 4. Chiama con numero pari\nnum_pari = 10\nrisultato_pari = is_pari(num_pari)\nprint(f\"Il numero {num_pari} è pari? {risultato_pari}\")\n\n# 5. Chiama con numero dispari\nnum_dispari = 7\nrisultato_dispari = is_pari(num_dispari)\nprint(f\"Il numero {num_dispari} è pari? {risultato_dispari}\")\n\n# 6. (Opzionale) Funzione stampa_parita\ndef stampa_parita(num):\n    \"\"\"Stampa se un numero è pari o dispari.\"\"\"\n    if is_pari(num):\n        print(f\"Il numero {num} è pari.\")\n    else:\n        print(f\"Il numero {num} è dispari.\")\n\nprint(\"\nUsando stampa_parita:\")\nstampa_parita(num_pari)\nstampa_parita(num_dispari)\nstampa_parita(123)"
}
