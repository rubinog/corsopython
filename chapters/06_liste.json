{
  "id": "liste",
  "title": "Liste: Collezioni Ordinate e Modificabili",
  "explanation": "<h2>Liste: Contenitori Flessibili</h2>\n<p>Le liste sono uno dei tipi di dati più versatili e usati in Python. Sono collezioni <strong>ordinate</strong> di elementi, il che significa che gli elementi mantengono l'ordine in cui li inserisci. Sono anche <strong>modificabili</strong> (o <em>mutabili</em>), quindi puoi aggiungere, rimuovere o cambiare elementi dopo aver creato la lista.</p>\n<p>Una lista può contenere elementi di tipi diversi (numeri, stringhe, booleani, altre liste, ecc.).</p>\n\n<h2>Creare una Lista</h2>\n<p>Si creano usando parentesi quadre <code>[]</code> e separando gli elementi con virgole.</p>\n<pre><code class=\"language-python\"># Lista vuota\nlista_vuota = []\n\n# Lista di numeri interi\nnumeri = [1, 2, 3, 4, 5]\n\n# Lista di stringhe\nfrutti = [\"mela\", \"banana\", \"arancia\"]\n\n# Lista con tipi misti\nmisto = [\"testo\", 100, 3.14, True]\n\n# Lista di liste (matrice o griglia)\nmatrice = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nprint(numeri)\nprint(misto)\nprint(matrice)</code></pre>\n\n<h2>Accedere agli Elementi: Indicizzazione</h2>\n<p>Puoi accedere a un singolo elemento della lista usando il suo <strong>indice</strong> (la sua posizione) tra parentesi quadre. Ricorda che l'indicizzazione in Python parte da <strong>0</strong>!</p>\n<ul>\n    <li><code>lista[0]</code>: Primo elemento.</li>\n    <li><code>lista[1]</code>: Secondo elemento.</li>\n    <li>...</li>\n    <li><code>lista[-1]</code>: Ultimo elemento (indicizzazione negativa).</li>\n    <li><code>lista[-2]</code>: Penultimo elemento.</li>\n</ul>\n<pre><code class=\"language-python\">numeri = [10, 20, 30, 40, 50]\n\nprimo = numeri[0]\nprint(f\"Primo elemento: {primo}\") # Output: 10\n\nterzo = numeri[2]\nprint(f\"Terzo elemento: {terzo}\") # Output: 30\n\nultimo = numeri[-1]\nprint(f\"Ultimo elemento: {ultimo}\") # Output: 50\n\n# Accedere a elementi di liste nidificate\nmatrice = [[1, 2], [3, 4]]\nelemento_1_0 = matrice[1][0] # Elemento all'indice 0 della lista all'indice 1\nprint(f\"Elemento [1][0] della matrice: {elemento_1_0}\") # Output: 3</code></pre>\n<p>⚠️ Tentare di accedere a un indice che non esiste causerà un errore <code>IndexError</code>.</p>\n\n<h2>Ottenere Sotto-Liste: Slicing</h2>\n<p>Lo slicing ti permette di estrarre una porzione (una sotto-lista) della lista originale. Usa la sintassi <code>lista[start:stop:step]</code>.</p>\n<ul>\n    <li><code>start</code>: Indice di inizio (incluso, default: 0).</li>\n    <li><code>stop</code>: Indice di fine (<strong>escluso</strong>, default: fine della lista).</li>\n    <li><code>step</code>: Passo (default: 1).</li>\n</ul>\n<pre><code class=\"language-python\">lettere = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\n# Dal secondo (indice 1) al quarto (indice 3 escluso)\nsotto_lista1 = lettere[1:4]\nprint(f\"lettere[1:4]: {sotto_lista1}\") # Output: ['b', 'c', 'd']\n\n# Dall'inizio fino al terzo (indice 2 escluso)\nsotto_lista2 = lettere[:3]\nprint(f\"lettere[:3]: {sotto_lista2}\") # Output: ['a', 'b', 'c']\n\n# Dal terzo (indice 2) fino alla fine\nsotto_lista3 = lettere[2:]\nprint(f\"lettere[2:]: {sotto_lista3}\") # Output: ['c', 'd', 'e', 'f', 'g']\n\n# Tutta la lista (crea una copia superficiale)\nsotto_lista4 = lettere[:]\nprint(f\"lettere[:]: {sotto_lista4}\")\n\n# Un elemento ogni due\nsotto_lista5 = lettere[::2]\nprint(f\"lettere[::2]: {sotto_lista5}\") # Output: ['a', 'c', 'e', 'g']\n\n# Invertire la lista\nsotto_lista6 = lettere[::-1]\nprint(f\"lettere[::-1]: {sotto_lista6}\") # Output: ['g', 'f', 'e', 'd', 'c', 'b', 'a']</code></pre>\n\n<h2>Modificare le Liste</h2>\n<p>Essendo mutabili, puoi cambiare gli elementi, aggiungerne o rimuoverne.</p>\n<pre><code class=\"language-python\">colori = [\"rosso\", \"verde\", \"blu\"]\nprint(f\"Originale: {colori}\")\n\n# Cambiare un elemento\ncolori[1] = \"giallo\" # Sostituisce \"verde\"\nprint(f\"Dopo modifica: {colori}\")\n\n# Aggiungere un elemento alla fine\ncolori.append(\"nero\")\nprint(f\"Dopo append: {colori}\")\n\n# Inserire un elemento a un indice specifico\ncolori.insert(1, \"arancione\") # Inserisce all'indice 1, spostando gli altri\nprint(f\"Dopo insert: {colori}\")\n\n# Rimuovere la prima occorrenza di un valore\ncolori.remove(\"giallo\")\nprint(f\"Dopo remove('giallo'): {colori}\")\n# Se provi a rimuovere un elemento non presente, otterrai un ValueError\n\n# Rimuovere un elemento per indice (e ottenerlo)\nultimo_colore = colori.pop() # Rimuove e restituisce l'ultimo elemento (\"nero\")\nprint(f\"Dopo pop(): {colori}, elemento rimosso: {ultimo_colore}\")\n\nsecondo_colore = colori.pop(1) # Rimuove e restituisce l'elemento all'indice 1 (\"arancione\")\nprint(f\"Dopo pop(1): {colori}, elemento rimosso: {secondo_colore}\")\n\n# Rimuovere elementi con del (anche slice)\ndel colori[0] # Rimuove il primo elemento (\"rosso\")\nprint(f\"Dopo del colori[0]: {colori}\")\n\nnumeri_slice = [0, 1, 2, 3, 4, 5]\ndel numeri_slice[1:4] # Rimuove elementi da indice 1 a 3 escluso\nprint(f\"Dopo del slice: {numeri_slice}\") # Output: [0, 4, 5]</code></pre>\n\n<h2>Altri Metodi Utili</h2>\n<ul>\n    <li><code>len(lista)</code>: Restituisce il numero di elementi nella lista.</li>\n    <li><code>lista.index(valore)</code>: Restituisce l'indice della prima occorrenza di <code>valore</code> (causa <code>ValueError</code> se non trovato).</li>\n    <li><code>lista.count(valore)</code>: Conta quante volte <code>valore</code> appare nella lista.</li>\n    <li><code>lista.sort()</code>: Ordina la lista sul posto (modifica l'originale). Funziona se gli elementi sono confrontabili (es. tutti numeri o tutte stringhe).</li>\n    <li><code>lista.reverse()</code>: Inverte l'ordine degli elementi sul posto.</li>\n    <li><code>lista.copy()</code>: Restituisce una copia superficiale della lista (utile per evitare modifiche indesiderate all'originale).</li>\n    <li><code>lista.clear()</code>: Rimuove tutti gli elementi dalla lista.</li>\n</ul>\n<pre><code class=\"language-python\">numeri_misti = [3, 1, 4, 1, 5, 9, 2]\nprint(f\"\nLista: {numeri_misti}\")\nprint(f\"Lunghezza: {len(numeri_misti)}\")\nprint(f\"Indice del primo '1': {numeri_misti.index(1)}\")\nprint(f\"Conteggio di '1': {numeri_misti.count(1)}\")\n\nnumeri_misti.sort() # Ordina sul posto\nprint(f\"Dopo sort(): {numeri_misti}\")\n\nnumeri_misti.reverse() # Inverte sul posto\nprint(f\"Dopo reverse(): {numeri_misti}\")\n\n# Copia\nlista_copia = numeri_misti.copy()\nlista_copia.clear()\nprint(f\"Originale dopo clear sulla copia: {numeri_misti}\")\nprint(f\"Copia dopo clear: {lista_copia}\")</code></pre>\n\n<h2>Liste e Cicli</h2>\n<p>Le liste sono perfette per essere usate con i cicli <code>for</code> per processare ogni elemento.</p>\n<pre><code class=\"language-python\">voti = [6, 7, 5, 8, 9]\nsomma_voti = 0\nfor voto in voti:\n    somma_voti += voto\nmedia = somma_voti / len(voti)\nprint(f\"\nMedia voti: {media}\")</code></pre>\n<p>Le liste sono strutture dati fondamentali in Python, offrendo grande flessibilità per gestire collezioni di dati.</p>",
  "exercise": "<p>1. Crea una lista chiamata <code>spesa</code> contenente alcune stringhe (es. \"pane\", \"latte\", \"uova\").</p>\n<p>2. Aggiungi \"frutta\" alla fine della lista usando <code>append()</code>.</p>\n<p>3. Inserisci \"verdura\" all'inizio della lista (indice 0) usando <code>insert()</code>.</p>\n<p>4. Stampa la lista aggiornata.</p>\n<p>5. Rimuovi \"latte\" dalla lista usando <code>remove()</code>.</p>\n<p>6. Stampa la lunghezza finale della lista.</p>\n<p>7. Usa un ciclo <code>for</code> per stampare ogni elemento rimanente della lista preceduto da un trattino (es. \"- verdura\").</p>",
  "defaultCode": "# 1. Crea la lista spesa\nspesa = [\"pane\", \"latte\", \"uova\"]\nprint(f\"Iniziale: {spesa}\")\n\n# 2. Aggiungi \"frutta\"\nspesa.append(\"frutta\")\n\n# 3. Inserisci \"verdura\" all'inizio\nspesa.insert(0, \"verdura\")\n\n# 4. Stampa la lista aggiornata\nprint(f\"Aggiornata: {spesa}\")\n\n# 5. Rimuovi \"latte\"\ntry:\n    spesa.remove(\"latte\")\n    print(f\"Dopo remove('latte'): {spesa}\")\nexcept ValueError:\n    print(\"'latte' non trovato nella lista.\")\n\n# 6. Stampa la lunghezza finale\nprint(f\"Lunghezza finale: {len(spesa)}\")\n\n# 7. Stampa gli elementi con un ciclo for\nprint(\"\nLista spesa finale:\")\nfor item in spesa:\n    print(f\"- {item}\")"
}
