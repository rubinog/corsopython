{
  "id": "cicli",
  "title": "Cicli (for/while): Ripetere le Azioni",
  "explanation": "<h2>Ripetere le Azioni: I Cicli</h2>\n<p>Molto spesso in programmazione abbiamo bisogno di ripetere un blocco di codice più volte. Invece di copiare e incollare lo stesso codice, usiamo i <strong>cicli</strong>. Python offre due tipi principali di cicli: <code>for</code> e <code>while</code>.</p>\n\n<h2>Il Ciclo <code>for</code>: Iterare su Sequenze</h2>\n<p>Il ciclo <code>for</code> è perfetto quando sai in anticipo quante volte vuoi ripetere un'azione o quando vuoi eseguire un'azione per ogni elemento in una collezione (come una lista, una tupla, una stringa o un range).</p>\n<p><strong>Sintassi:</strong></p>\n<pre><code class=\"language-python\">for variabile_temporanea in sequenza_iterabile:\n    # Blocco di codice da ripetere\n    # Usa 'variabile_temporanea' per accedere all'elemento corrente\n    print(variabile_temporanea)</code></pre>\n<p><strong>Esempi:</strong></p>\n<pre><code class=\"language-python\"># Iterare su una lista\nfrutti = [\"mela\", \"banana\", \"ciliegia\"]\nprint(\"Lista di frutti:\")\nfor frutto in frutti:\n    print(f\"- {frutto}\")\n\n# Iterare su una stringa (carattere per carattere)\nparola = \"Python\"\nprint(\"\nLettere nella parola:\")\nfor lettera in parola:\n    print(lettera)\n\n# Iterare su un range di numeri con range()\nprint(\"\nNumeri da 0 a 4:\")\nfor i in range(5): # range(5) genera la sequenza 0, 1, 2, 3, 4\n    print(i)</code></pre>\n\n<h3>La Funzione <code>range()</code></h3>\n<p><code>range()</code> è molto utile con i cicli <code>for</code> per generare sequenze di numeri:</p>\n<ul>\n    <li><code>range(stop)</code>: Genera numeri da 0 fino a <code>stop - 1</code>. Es: <code>range(5)</code> -> 0, 1, 2, 3, 4.</li>\n    <li><code>range(start, stop)</code>: Genera numeri da <code>start</code> fino a <code>stop - 1</code>. Es: <code>range(2, 6)</code> -> 2, 3, 4, 5.</li>\n    <li><code>range(start, stop, step)</code>: Genera numeri da <code>start</code> fino a <code>stop - 1</code>, incrementando di <code>step</code>. Es: <code>range(1, 10, 2)</code> -> 1, 3, 5, 7, 9.</li>\n</ul>\n<pre><code class=\"language-python\">print(\"\nNumeri pari da 0 a 8:\")\nfor num in range(0, 10, 2):\n    print(num)</code></pre>\n\n<h2>Il Ciclo <code>while</code>: Ripetere Finché una Condizione è Vera</h2>\n<p>Il ciclo <code>while</code> continua a eseguire un blocco di codice <strong>finché</strong> una specifica condizione rimane <code>True</code>. È utile quando non sai esattamente quante volte dovrai ripetere il ciclo, ma sai quando fermarti.</p>\n<p><strong>Sintassi:</strong></p>\n<pre><code class=\"language-python\">while condizione_booleana:\n    # Blocco di codice da ripetere\n    print(\"La condizione è ancora vera...\")\n    # !!! IMPORTANTE: Assicurati che qualcosa nel blocco\n    # !!! possa eventualmente rendere la condizione False,\n    # !!! altrimenti avrai un ciclo infinito!\n</code></pre>\n<p><strong>Esempio:</strong> Contare fino a 5.</p>\n<pre><code class=\"language-python\">contatore = 0\nprint(\"\nConto alla rovescia (while):\")\nwhile contatore < 5:\n    print(contatore)\n    contatore += 1 # Aggiorna la variabile che controlla la condizione\n\nprint(\"Fine del ciclo while.\")</code></pre>\n\n<h3>⚠️ Insidia Comune: Cicli Infiniti</h3>\n<p>Un errore comune con <code>while</code> è dimenticare di aggiornare la variabile che controlla la condizione, o creare una condizione che non diventerà mai <code>False</code>. Questo porta a un <strong>ciclo infinito</strong>, che bloccherà l'esecuzione del programma (o del browser in questo caso).</p>\n<pre><code class=\"language-python\"># ATTENZIONE: ESEMPIO DI CICLO INFINITO (NON ESEGUIRE SE NON SAI COME FERMARLO)\n# x = 0\n# while x < 5:\n#     print(\"Aiuto, sono bloccato!\")\n#     # Manca x += 1, quindi x rimane sempre 0 e la condizione x < 5 è sempre True!\n</code></pre>\n<p>Assicurati sempre che la condizione del tuo <code>while</code> possa prima o poi diventare <code>False</code>.</p>\n\n<h2>Interrompere e Saltare: <code>break</code> e <code>continue</code></h2>\n<p>A volte potresti voler uscire da un ciclo prematuramente o saltare all'iterazione successiva. Python fornisce due istruzioni per questo, utilizzabili sia in <code>for</code> che in <code>while</code>:</p>\n<ul>\n    <li><strong><code>break</code>:</strong> Interrompe immediatamente l'esecuzione del ciclo più interno in cui si trova. Il programma continua con la prima istruzione dopo il ciclo.</li>\n    <li><strong><code>continue</code>:</strong> Salta il resto del codice all'interno del blocco del ciclo per l'iterazione corrente e passa direttamente all'inizio dell'iterazione successiva.</li>\n</ul>\n<pre><code class=\"language-python\">print(\"\nEsempio con break (trova il primo numero > 5):\")\nfor i in range(10):\n    if i > 5:\n        print(f\"Trovato {i}, esco dal ciclo.\")\n        break # Interrompe il ciclo for\n    print(f\"Controllo {i}...\")\n\nprint(\"\nEsempio con continue (salta i numeri pari):\")\nfor i in range(10):\n    if i % 2 == 0: # Se il numero è pari\n        continue # Salta il print e passa al prossimo i\n    print(f\"Numero dispari: {i}\")\n</code></pre>\n<p>I cicli sono strumenti potentissimi per automatizzare compiti ripetitivi e lavorare con collezioni di dati.</p>",
  "exercise": "<p>1. Usa un ciclo <code>for</code> e <code>range()</code> per stampare i numeri da 10 a 1 (in ordine decrescente).</p>\n<p>2. Data la lista <code>nomi = [\"Anna\", \"Marco\", \"Luca\", \"Elisa\"]</code>, usa un ciclo <code>for</code> per stampare solo i nomi che hanno una lunghezza di 4 caratteri.</p>\n<p>3. Usa un ciclo <code>while</code> per stampare i multipli di 3 minori di 20 (3, 6, 9, ...).</p>\n<p>4. (Opzionale - più difficile) Simula il lancio di una moneta (usando <code>random.choice(['Testa', 'Croce'])</code> - dovrai importare <code>random</code>) finché non esce 'Testa' per 3 volte di seguito. Stampa ogni lancio e un messaggio finale quando hai ottenuto le 3 teste consecutive.</p>"
}
