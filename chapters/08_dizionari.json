{
  "id": "dizionari",
  "title": "Dizionari: Coppie Chiave-Valore",
  "explanation": "<h2>Dizionari: Associare Dati con le Chiavi</h2>\n<p>I dizionari (<code>dict</code>) sono un altro tipo di collezione fondamentale in Python. A differenza delle liste e delle tuple che sono indicizzate numericamente, i dizionari usano <strong>chiavi</strong> univoche per accedere ai <strong>valori</strong> associati. Immagina un vero dizionario: cerchi una parola (la chiave) per trovare la sua definizione (il valore).</p>\n<p>Caratteristiche principali:</p>\n<ul>\n    <li><strong>Coppie Chiave-Valore:</strong> Ogni elemento è una coppia <code>chiave: valore</code>.</li>\n    <li><strong>Chiavi Univoche e Immutabili:</strong> Ogni chiave all'interno di un dizionario deve essere unica. Le chiavi devono essere di un tipo immutabile (come stringhe, numeri, tuple contenenti solo immutabili). Le liste non possono essere usate come chiavi.</li>\n    <li><strong>Valori Qualsiasi:</strong> I valori possono essere di qualsiasi tipo (numeri, stringhe, liste, altri dizionari, ecc.).</li>\n    <li><strong>Ordinati (da Python 3.7+):</strong> Nelle versioni moderne di Python (3.7 e successive), i dizionari mantengono l'ordine di inserimento delle chiavi. Nelle versioni precedenti, erano considerati non ordinati.</li>\n    <li><strong>Mutabili:</strong> Puoi aggiungere, rimuovere e modificare le coppie chiave-valore dopo la creazione.</li>\n</ul>\n\n<h2>Creare un Dizionario</h2>\n<p>Si creano usando parentesi graffe <code>{}</code> con le coppie <code>chiave: valore</code> separate da virgole, oppure usando la funzione <code>dict()</code>.</p>\n<pre><code class=\"language-python\"># Dizionario vuoto\ndiz_vuoto1 = {}\ndiz_vuoto2 = dict()\n\n# Dizionario con coppie chiave-valore\nstudente = {\n    \"nome\": \"Laura\",\n    \"eta\": 22,\n    \"corso\": \"Informatica\",\n    \"materie\": [\"Programmazione\", \"Database\", \"Algoritmi\"]\n}\n\nprint(studente)\n\n# Creare con dict() e keyword arguments (solo per chiavi stringa valide come nomi)\naltro_studente = dict(nome=\"Marco\", eta=25, citta=\"Milano\")\nprint(altro_studente)</code></pre>\n\n<h2>Accedere ai Valori</h2>\n<p>Si accede ai valori usando la chiave corrispondente tra parentesi quadre <code>[]</code> o usando il metodo <code>get()</code>.</p>\n<pre><code class=\"language-python\">studente = {\"nome\": \"Laura\", \"eta\": 22, \"corso\": \"Informatica\"}\n\n# Accesso con parentesi quadre\nnome_studente = studente[\"nome\"]\nprint(f\"Nome: {nome_studente}\") # Output: Laura\n\n# ⚠️ Se la chiave non esiste, [] causa un KeyError!\n# print(studente[\"cognome\"]) # -> KeyError: 'cognome'\n\n# Accesso con get() (più sicuro)\ncognome_studente = studente.get(\"cognome\")\nprint(f\"Cognome (get): {cognome_studente}\") # Output: None (non causa errore)\n\n# get() con valore di default\ncognome_studente_default = studente.get(\"cognome\", \"Non specificato\")\nprint(f\"Cognome (get con default): {cognome_studente_default}\") # Output: Non specificato</code></pre>\n<p>Il metodo <code>get()</code> è preferibile quando non sei sicuro se una chiave esista, per evitare che il programma si interrompa con un <code>KeyError</code>.</p>\n\n<h2>Modificare, Aggiungere e Rimuovere Elementi</h2>\n<p>Essendo mutabili, i dizionari possono essere facilmente aggiornati.</p>\n<pre><code class=\"language-python\">contatto = {\"nome\": \"Paolo\", \"telefono\": \"12345\"}\nprint(f\"Contatto iniziale: {contatto}\")\n\n# Modificare un valore esistente\ncontatto[\"telefono\"] = \"98765\"\nprint(f\"Dopo modifica telefono: {contatto}\")\n\n# Aggiungere una nuova coppia chiave-valore\ncontatto[\"email\"] = \"paolo@example.com\"\nprint(f\"Dopo aggiunta email: {contatto}\")\n\n# Aggiungere/Modificare più coppie con update()\ncontatto.update({\"citta\": \"Roma\", \"telefono\": \"55555\"}) # Modifica telefono, aggiunge citta\nprint(f\"Dopo update(): {contatto}\")\n\n# Rimuovere una coppia usando pop()\nemail_rimossa = contatto.pop(\"email\") # Rimuove la chiave e restituisce il valore\nprint(f\"Dopo pop('email'): {contatto}, email rimossa: {email_rimossa}\")\n# contatto.pop(\"chiave_inesistente\") # -> KeyError\nvalore_default = contatto.pop(\"chiave_inesistente\", \"Nessun valore\") # pop con default\nprint(f\"pop con default: {valore_default}\")\n\n# Rimuovere e restituire l'ultima coppia inserita (da Python 3.7+)\nchiave, valore = contatto.popitem()\nprint(f\"Dopo popitem(): {contatto}, coppia rimossa: ({chiave}, {valore})\")\n\n# Rimuovere una coppia usando del\ndel contatto[\"nome\"]\nprint(f\"Dopo del contatto['nome']: {contatto}\")\n\n# Svuotare il dizionario\ncontatto.clear()\nprint(f\"Dopo clear(): {contatto}\")</code></pre>\n\n<h2>Iterare sui Dizionari</h2>\n<p>Puoi ciclare su chiavi, valori o coppie chiave-valore.</p>\n<pre><code class=\"language-python\">punteggi = {\"Mario\": 85, \"Luisa\": 92, \"Carlo\": 78}\n\n# Iterare sulle chiavi (comportamento di default)\nprint(\"\nNomi (chiavi):\")\nfor nome in punteggi:\n    print(nome) # Stampa Mario, Luisa, Carlo\n    # Per ottenere il valore corrispondente:\n    # print(f\"- {nome}: {punteggi[nome]}\")\n\n# Iterare sui valori usando .values()\nprint(\"\nPunteggi (valori):\")\nfor punti in punteggi.values():\n    print(punti) # Stampa 85, 92, 78\n\n# Iterare su coppie chiave-valore usando .items()\nprint(\"\nNomi e Punteggi (items):\")\nfor nome, punti in punteggi.items():\n    print(f\"- {nome} ha totalizzato {punti} punti.\")</code></pre>\n\n<h2>Altri Metodi e Operazioni</h2>\n<ul>\n    <li><code>len(dizionario)</code>: Restituisce il numero di coppie chiave-valore.</li>\n    <li><code>chiave in dizionario</code>: Verifica se una chiave è presente nel dizionario (restituisce <code>True</code> o <code>False</code>, molto efficiente).</li>\n    <li><code>dizionario.keys()</code>: Restituisce una vista dinamica delle chiavi.</li>\n    <li><code>dizionario.values()</code>: Restituisce una vista dinamica dei valori.</li>\n    <li><code>dizionario.items()</code>: Restituisce una vista dinamica delle coppie (chiave, valore).</li>\n    <li><code>dizionario.copy()</code>: Restituisce una copia superficiale del dizionario.</li>\n</ul>\n<pre><code class=\"language-python\">impostazioni = {\"tema\": \"scuro\", \"lingua\": \"italiano\"}\nprint(f\"\nNumero impostazioni: {len(impostazioni)}\")\nprint(f\"'tema' è presente? {\"tema\" in impostazioni}\") # Output: True\nprint(f\"'utente' è presente? {\"utente\" in impostazioni}\") # Output: False\n\nprint(f\"Chiavi: {impostazioni.keys()}\")\nprint(f\"Valori: {impostazioni.values()}\")\nprint(f\"Items: {impostazioni.items()}\")</code></pre>\n<p>I dizionari sono estremamente utili per rappresentare dati strutturati dove ogni pezzo di informazione ha un nome (la chiave) specifico.</p>",
  "exercise": "<p>1. Crea un dizionario chiamato <code>prodotto</code> per rappresentare un articolo in vendita, con le seguenti chiavi e valori:</p>\n<ul>\n    <li><code>\"codice\"</code>: \"XYZ123\"</li>\n    <li><code>\"nome\"</code>: \"Smartphone\"</li>\n    <li><code>\"prezzo\"</code>: 499.99</li>\n    <li><code>\"disponibile\"</code>: True</li>\n</ul>\n<p>2. Stampa il valore associato alla chiave <code>\"nome\"</code>.</p>\n<p>3. Aggiungi una nuova coppia chiave-valore: <code>\"marca\"</code>: \"TechCorp\".</p>\n<p>4. Modifica il valore di <code>\"prezzo\"</code> a 479.99.</p>\n<p>5. Usa il metodo <code>get()</code> per cercare la chiave <code>\"colore\"</code>, fornendo \"N/D\" come valore di default se non esiste, e stampa il risultato.</p>\n<p>6. Usa un ciclo <code>for</code> con <code>.items()</code> per stampare tutte le coppie chiave-valore del dizionario nel formato \"Chiave: Valore\".</p>",
  "defaultCode": "# 1. Crea il dizionario prodotto\nprodotto = {\n    \"codice\": \"XYZ123\",\n    \"nome\": \"Smartphone\",\n    \"prezzo\": 499.99,\n    \"disponibile\": True\n}\nprint(f\"Dizionario iniziale: {prodotto}\")\n\n# 2. Stampa il nome\nprint(f\"\nNome prodotto: {prodotto['nome']}\")\n\n# 3. Aggiungi la marca\nprodotto[\"marca\"] = \"TechCorp\"\nprint(f\"Dopo aggiunta marca: {prodotto}\")\n\n# 4. Modifica il prezzo\nprodotto[\"prezzo\"] = 479.99\nprint(f\"Dopo modifica prezzo: {prodotto}\")\n\n# 5. Cerca il colore con get()\ncolore_prodotto = prodotto.get(\"colore\", \"N/D\")\nprint(f\"\nColore (get con default): {colore_prodotto}\")\n\n# 6. Stampa tutte le coppie\nprint(\"\nDettagli prodotto:\")\nfor chiave, valore in prodotto.items():\n    print(f\"- {chiave.capitalize()}: {valore}\")"
}
