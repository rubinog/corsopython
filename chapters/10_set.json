{
  "id": "set",
  "title": "Set (Insiemi): Collezioni Uniche e Non Ordinate",
  "explanation": "<h2>Set: Elementi Unici Senza Ordine</h2>\n<p>I set (<code>set</code>) sono collezioni <strong>non ordinate</strong> di elementi <strong>unici</strong>. La caratteristica principale è che non possono contenere duplicati: se provi ad aggiungere un elemento già presente, semplicemente non succede nulla.</p>\n<p>Caratteristiche principali:</p>\n<ul>\n    <li><strong>Unici:</strong> Non ammettono duplicati.</li>\n    <li><strong>Non Ordinati:</strong> Gli elementi non hanno una posizione definita (non puoi usare indici numerici come <code>set[0]</code>). L'ordine in cui vengono stampati può variare.</li>\n    <li><strong>Mutabili:</strong> Puoi aggiungere e rimuovere elementi dopo la creazione.</li>\n    <li><strong>Elementi Immutabili:</strong> Gli elementi contenuti in un set devono essere di tipo immutabile (numeri, stringhe, tuple contenenti solo immutabili). Non puoi mettere liste o altri set all'interno di un set.</li>\n</ul>\n\n<h2>Creare un Set</h2>\n<p>Si creano usando parentesi graffe <code>{}</code> con elementi separati da virgole, oppure usando la funzione <code>set()</code>.</p>\n<pre><code class=\"language-python\"># Creare un set con {}\nnumeri_unici = {1, 2, 3, 4, 4, 5} # Il duplicato 4 viene ignorato\nprint(numeri_unici) # Output: {1, 2, 3, 4, 5} (l'ordine può variare)\n\nlettere = {'a', 'b', 'c'}\nprint(lettere)\n\n# !!! Attenzione: {} crea un DIZIONARIO vuoto, non un set vuoto!\ndiz_vuoto = {}\nprint(type(diz_vuoto)) # Output: <class 'dict'>\n\n# Per creare un SET vuoto, usa set()\nset_vuoto = set()\nprint(type(set_vuoto)) # Output: <class 'set'>\n\n# Creare un set da un iterabile (es. lista, stringa, tupla)\nlista_con_duplicati = [1, 2, 2, 3, 1]\nset_da_lista = set(lista_con_duplicati)\nprint(set_da_lista) # Output: {1, 2, 3}\n\nset_da_stringa = set(\"banana\")\nprint(set_da_stringa) # Output: {'a', 'b', 'n'} (ordine variabile)</code></pre>\n\n<h2>Aggiungere e Rimuovere Elementi</h2>\n<p>Essendo mutabili, puoi modificare i set.</p>\n<pre><code class=\"language-python\">colori = {\"rosso\", \"verde\", \"blu\"}\nprint(f\"Set iniziale: {colori}\")\n\n# Aggiungere un elemento con add()\ncolori.add(\"giallo\")\nprint(f\"Dopo add('giallo'): {colori}\")\ncolori.add(\"rosso\") # Aggiungere un duplicato non ha effetto\nprint(f\"Dopo add('rosso') di nuovo: {colori}\")\n\n# Rimuovere un elemento con remove()\ncolori.remove(\"verde\")\nprint(f\"Dopo remove('verde'): {colori}\")\n# colori.remove(\"viola\") # -> KeyError: 'viola' (causa errore se non presente)\n\n# Rimuovere un elemento con discard() (non causa errore se non presente)\ncolori.discard(\"blu\")\nprint(f\"Dopo discard('blu'): {colori}\")\ncolori.discard(\"viola\") # Non fa nulla, non causa errore\nprint(f\"Dopo discard('viola'): {colori}\")\n\n# Rimuovere e restituire un elemento arbitrario con pop()\n# (Non puoi sapere quale elemento verrà rimosso)\nelemento_rimosso = colori.pop()\nprint(f\"Dopo pop(): {colori}, elemento rimosso: {elemento_rimosso}\")\n\n# Svuotare il set\ncolori.clear()\nprint(f\"Dopo clear(): {colori}\")</code></pre>\n\n<h2>Operazioni Matematiche tra Insiemi</h2>\n<p>I set sono perfetti per eseguire le classiche operazioni della teoria degli insiemi.</p>\n<pre><code class=\"language-python\">set_a = {1, 2, 3, 4}\nset_b = {3, 4, 5, 6}\n\n# Unione (| o .union()): Elementi presenti in A o in B o in entrambi\nunione = set_a | set_b\n# unione = set_a.union(set_b)\nprint(f\"Unione: {unione}\") # Output: {1, 2, 3, 4, 5, 6}\n\n# Intersezione (& o .intersection()): Elementi presenti sia in A che in B\nintersezione = set_a & set_b\n# intersezione = set_a.intersection(set_b)\nprint(f\"Intersezione: {intersezione}\") # Output: {3, 4}\n\n# Differenza (- o .difference()): Elementi presenti in A ma non in B\ndifferenza_ab = set_a - set_b\n# differenza_ab = set_a.difference(set_b)\nprint(f\"Differenza A - B: {differenza_ab}\") # Output: {1, 2}\n\ndifferenza_ba = set_b - set_a\nprint(f\"Differenza B - A: {differenza_ba}\") # Output: {5, 6}\n\n# Differenza Simmetrica (^ o .symmetric_difference()): Elementi presenti in A o in B, ma non in entrambi\ndiff_simmetrica = set_a ^ set_b\n# diff_simmetrica = set_a.symmetric_difference(set_b)\nprint(f\"Differenza Simmetrica: {diff_simmetrica}\") # Output: {1, 2, 5, 6}\n\n# Verificare sottoinsiemi/sovrainsiemi\nset_c = {1, 2}\nprint(f\"C è sottoinsieme di A? {set_c.issubset(set_a)}\") # Output: True\nprint(f\"A è sovrainsieme di C? {set_a.issuperset(set_c)}\") # Output: True\nprint(f\"A è sottoinsieme di B? {set_a.issubset(set_b)}\") # Output: False</code></pre>\n\n<h2>Appartenenza (Membership Testing)</h2>\n<p>Controllare se un elemento è presente in un set usando <code>in</code> è estremamente efficiente (molto più veloce che controllare in una lista, specialmente per collezioni grandi).</p>\n<pre><code class=\"language-python\">numeri_validi = {10, 20, 30, 40, 50}\nnumero = 20\n\nif numero in numeri_validi:\n    print(f\"Il numero {numero} è valido.\")\nelse:\n    print(f\"Il numero {numero} non è valido.\")\n\nprint(f\"15 è valido? {15 in numeri_validi}\") # Output: False</code></pre>\n\n<h2>Casi d'Uso Comuni</h2>\n<ul>\n    <li><strong>Rimuovere duplicati</strong> da una lista: <code>lista_unica = list(set(lista_originale))</code></li>\n    <li><strong>Verificare l'appartenenza</strong> rapida di elementi.</li>\n    <li>Eseguire <strong>operazioni matematiche</strong> tra collezioni (unione, intersezione, ecc.).</li>\n</ul>\n<p>I set sono uno strumento potente quando l'unicità e l'efficienza nella verifica dell'appartenenza sono importanti, e l'ordine non conta.</p>",
  "exercise": "<p>1. Crea una lista <code>numeri_con_duplicati = [1, 5, 2, 8, 5, 3, 1, 9, 2]</code>.</p>\n<p>2. Crea un set chiamato <code>numeri_unici</code> a partire dalla lista precedente per rimuovere i duplicati.</p>\n<p>3. Stampa il set <code>numeri_unici</code>.</p>\n<p>4. Aggiungi il numero 10 al set <code>numeri_unici</code>.</p>\n<p>5. Verifica se il numero 5 è presente nel set e stampa il risultato (<code>True</code>/<code>False</code>).</p>\n<p>6. Crea un secondo set <code>altri_numeri = {5, 10, 15, 20}</code>.</p>\n<p>7. Calcola e stampa l'intersezione tra <code>numeri_unici</code> e <code>altri_numeri</code>.</p>\n<p>8. Calcola e stampa l'unione tra <code>numeri_unici</code> e <code>altri_numeri</code>.</p>",
  "defaultCode": "# 1. Lista con duplicati\nnumeri_con_duplicati = [1, 5, 2, 8, 5, 3, 1, 9, 2]\n\n# 2. Crea set per rimuovere duplicati\nnumeri_unici = set(numeri_con_duplicati)\n\n# 3. Stampa il set\nprint(f\"Set di numeri unici: {numeri_unici}\")\n\n# 4. Aggiungi 10\nnumeri_unici.add(10)\nprint(f\"Dopo aver aggiunto 10: {numeri_unici}\")\n\n# 5. Verifica presenza di 5\nprint(f\"Il numero 5 è nel set? {5 in numeri_unici}\")\n\n# 6. Crea un secondo set\naltri_numeri = {5, 10, 15, 20}\nprint(f\"Secondo set: {altri_numeri}\")\n\n# 7. Calcola e stampa intersezione\nintersezione = numeri_unici & altri_numeri\nprint(f\"Intersezione: {intersezione}\")\n\n# 8. Calcola e stampa unione\nunione = numeri_unici | altri_numeri\nprint(f\"Unione: {unione}\")"
}
