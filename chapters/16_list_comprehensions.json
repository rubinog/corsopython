{
  "id": "list_comprehensions",
  "title": "List Comprehensions: Creare Liste in Modo Conciso",
  "explanation": "<h2>List Comprehensions: Sintassi Elegante per Creare Liste</h2>\n<p>Le <strong>list comprehensions</strong> offrono un modo più breve e spesso più leggibile (una volta compresa la sintassi) per creare liste basate su sequenze esistenti. Sono una caratteristica distintiva e molto apprezzata di Python.</p>\n<p>Sostanzialmente, condensano un ciclo <code>for</code> (e opzionalmente un <code>if</code>) usato per costruire una lista in una singola riga.</p>\n\n<h2>Sintassi Base</h2>\n<p>La forma più semplice è:</p>\n<p><code>nuova_lista = [espressione for elemento in iterabile]</code></p>\n<p>Questo equivale a:</p>\n<pre><code class=\"language-python\">nuova_lista = []\nfor elemento in iterabile:\n    nuova_lista.append(espressione)</code></pre>\n<p><strong>Esempio:</strong> Creare una lista dei quadrati dei numeri da 0 a 9.</p>\n<pre><code class=\"language-python\"># Modo tradizionale con ciclo for\nquadrati_loop = []\nfor x in range(10):\n    quadrati_loop.append(x**2)\nprint(f\"Con loop for: {quadrati_loop}\")\n\n# Con List Comprehension\nquadrati_comp = [x**2 for x in range(10)]\nprint(f\"Con comprehension: {quadrati_comp}\")</code></pre>\n<p>Come vedi, la list comprehension è molto più compatta.</p>\n\n<h2>Aggiungere Condizioni di Filtraggio (<code>if</code>)</h2>\n<p>Puoi aggiungere una clausola <code>if</code> alla fine per includere nella nuova lista solo gli elementi dell'iterabile originale che soddisfano una certa condizione.</p>\n<p><code>nuova_lista = [espressione for elemento in iterabile if condizione]</code></p>\n<p>Questo equivale a:</p>\n<pre><code class=\"language-python\">nuova_lista = []\nfor elemento in iterabile:\n    if condizione:\n        nuova_lista.append(espressione)</code></pre>\n<p><strong>Esempio:</strong> Creare una lista dei quadrati dei soli numeri pari da 0 a 9.</p>\n<pre><code class=\"language-python\"># Modo tradizionale\nquadrati_pari_loop = []\nfor x in range(10):\n    if x % 2 == 0:\n        quadrati_pari_loop.append(x**2)\nprint(f\"Pari con loop: {quadrati_pari_loop}\")\n\n# Con List Comprehension\nquadrati_pari_comp = [x**2 for x in range(10) if x % 2 == 0]\nprint(f\"Pari con comprehension: {quadrati_pari_comp}\")</code></pre>\n\n<h2>Espressioni Condizionali nell'Espressione</h2>\n<p>Puoi anche usare un'espressione condizionale (<code>valore_se_vero if condizione else valore_se_falso</code>) nella parte dell'<code>espressione</code> della comprehension per trasformare gli elementi in modo diverso a seconda di una condizione.</p>\n<p><code>nuova_lista = [espressione_if_true if condizione else espressione_if_false for elemento in iterabile]</code></p>\n<p><strong>Esempio:</strong> Creare una lista che contenga 'pari' o 'dispari' per ogni numero da 0 a 4.</p>\n<pre><code class=\"language-python\"># Modo tradizionale\nparita_loop = []\nfor x in range(5):\n    if x % 2 == 0:\n        parita_loop.append(\"pari\")\n    else:\n        parita_loop.append(\"dispari\")\nprint(f\"Parità con loop: {parita_loop}\")\n\n# Con List Comprehension e espressione condizionale\nparita_comp = [\"pari\" if x % 2 == 0 else \"dispari\" for x in range(5)]\nprint(f\"Parità con comprehension: {parita_comp}\")</code></pre>\n<p>Nota che in questo caso l'<code>if...else</code> fa parte dell'<code>espressione</code> all'inizio, non è una clausola di filtraggio alla fine.</p>\n\n<h2>Vantaggi e Considerazioni</h2>\n<ul>\n    <li><strong>Concisenza e Leggibilità:</strong> Per trasformazioni e filtri semplici, le list comprehension sono spesso più leggibili dei loop equivalenti.</li>\n    <li><strong>Performance:</strong> Possono essere leggermente più veloci dei loop <code>for</code> con <code>append()</code> perché ottimizzate a un livello inferiore in CPython.</li>\n    <li><strong>Complessità:</strong> Evita di creare list comprehension eccessivamente complesse o nidificate. Se diventano difficili da leggere, un ciclo <code>for</code> tradizionale potrebbe essere preferibile.</li>\n</ul>\n\n<h2>Altri Tipi di Comprehension</h2>\n<p>Esistono sintassi simili anche per creare set e dizionari:</p>\n<ul>\n    <li><strong>Set Comprehension:</strong> <code>{espressione for elemento in iterabile if condizione}</code></li>\n    <li><strong>Dictionary Comprehension:</strong> <code>{chiave_espressione: valore_espressione for elemento in iterabile if condizione}</code></li>\n</ul>\n<pre><code class=\"language-python\"># Set comprehension (elementi unici)\nset_quadrati = {x**2 for x in range(5)}\nprint(f\"Set quadrati: {set_quadrati}\")\n\n# Dictionary comprehension\ndiz_quadrati = {x: x**2 for x in range(5)}\nprint(f\"Dizionario quadrati: {diz_quadrati}\")</code></pre>\n<p>Le list comprehension sono uno strumento potente ed elegante nel toolkit di ogni programmatore Python.</p>",
  "exercise": "<p>1. Data la lista <code>numeri = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>.</p>\n<p>2. Usa una list comprehension per creare una nuova lista chiamata <code>numeri_doppi</code> contenente il doppio di ogni numero nella lista originale.</p>\n<p>3. Usa una list comprehension per creare una nuova lista chiamata <code>numeri_maggiori_5</code> contenente solo i numeri della lista originale che sono maggiori di 5.</p>\n<p>4. Usa una list comprehension per creare una nuova lista chiamata <code>stringhe_numeri</code> dove ogni numero pari è convertito nella stringa \"[numero] è pari\" e ogni numero dispari nella stringa \"[numero] è dispari\".</p>\n<p>5. Stampa le tre nuove liste create.</p>",
  "defaultCode": "# 1. Lista originale\nnumeri = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(f\"Lista originale: {numeri}\")\n\n# 2. Lista con numeri doppi\nnumeri_doppi = [n * 2 for n in numeri]\nprint(f\"Numeri doppi: {numeri_doppi}\")\n\n# 3. Lista con numeri maggiori di 5\nnumeri_maggiori_5 = [n for n in numeri if n > 5]\nprint(f\"Numeri > 5: {numeri_maggiori_5}\")\n\n# 4. Lista con stringhe pari/dispari\nstringhe_numeri = [f\"{n} è pari\" if n % 2 == 0 else f\"{n} è dispari\" for n in numeri]\nprint(f\"Stringhe pari/dispari: {stringhe_numeri}\")"
}
