{
  "id": "lambda",
  "title": "Funzioni Lambda: Funzioni Anonime al Volo",
  "explanation": "<h2>Funzioni Lambda: Piccole Funzioni Senza Nome</h2>\n<p>Le funzioni lambda (o funzioni anonime) sono un modo per creare piccole funzioni in linea, senza doverle definire formalmente usando <code>def</code>. Sono utili quando hai bisogno di una funzione semplice per un compito specifico e di breve durata, specialmente come argomento per altre funzioni.</p>\n\n<h2>Sintassi</h2>\n<p>La sintassi è concisa:</p>\n<p><code>lambda argomenti: espressione</code></p>\n<ul>\n    <li>La parola chiave <code>lambda</code>.</li>\n    <li>Uno o più <code>argomenti</code> separati da virgola (come i parametri di una funzione normale).</li>\n    <li>I due punti <code>:</code>.</li>\n    <li>Una singola <code>espressione</code>. Il valore di questa espressione è ciò che la funzione lambda restituisce implicitamente.</li>\n</ul>\n<p><strong>Limitazioni:</strong></p>\n<ul>\n    <li>Possono contenere solo <strong>una singola espressione</strong>, non istruzioni multiple (come assegnamenti, cicli <code>for</code>/<code>while</code>, <code>if</code> multi-riga, <code>try</code>/<code>except</code>).</li>\n    <li>Non hanno un nome intrinseco (sono anonime), anche se puoi assegnarle a una variabile.</li>\n</ul>\n\n<h2>Esempi Semplici</h2>\n<pre><code class=\"language-python\"># Una lambda che aggiunge 10 a un numero\naggiungi_dieci = lambda x: x + 10\nprint(f\"15 + 10 = {aggiungi_dieci(15)}\")\n\n# Una lambda che moltiplica due numeri\nmoltiplica = lambda a, b: a * b\nprint(f\"5 * 6 = {moltiplica(5, 6)}\")\n\n# Una lambda che restituisce True se un numero è pari\ncontrolla_pari = lambda num: num % 2 == 0\nprint(f\"7 è pari? {controlla_pari(7)}\")\nprint(f\"8 è pari? {controlla_pari(8)}\")</code></pre>\n<p>Sebbene tu possa assegnare una lambda a una variabile (come <code>aggiungi_dieci</code>), se la funzione diventa più complessa o la riutilizzi spesso, è generalmente preferibile definirla con <code>def</code> per maggiore chiarezza e capacità.</p>\n\n<h2>Uso con Funzioni di Ordine Superiore</h2>\n<p>Il vero punto di forza delle lambda emerge quando vengono usate come argomenti per funzioni che accettano altre funzioni (chiamate funzioni di ordine superiore). Esempi comuni includono <code>sorted()</code>, <code>map()</code>, e <code>filter()</code>.</p>\n\n<h3><code>sorted(iterable, key=...)</code></h3>\n<p>La funzione <code>sorted()</code> ordina un iterabile. Il parametro <code>key</code> accetta una funzione che viene chiamata su ogni elemento prima di fare i confronti. Le lambda sono perfette per definire rapidamente questa funzione chiave.</p>\n<pre><code class=\"language-python\"># Lista di tuple (nome, età)\npersone = [(\"Mario\", 30), (\"Anna\", 25), (\"Luca\", 35)]\n\n# Ordina per nome (default, perché le stringhe sono confrontabili)\npersone_ordinate_nome = sorted(persone)\nprint(f\"Ordinate per nome: {persone_ordinate_nome}\")\n\n# Ordina per età usando una lambda come chiave\npersone_ordinate_eta = sorted(persone, key=lambda persona: persona[1])\nprint(f\"Ordinate per età: {persone_ordinate_eta}\")</code></pre>\n\n<h3><code>filter(function, iterable)</code></h3>\n<p>La funzione <code>filter()</code> costruisce un iteratore dagli elementi di <code>iterable</code> per i quali <code>function</code> restituisce <code>True</code>. Le lambda sono ideali per definire rapidamente la funzione di filtro.</p>\n<pre><code class=\"language-python\">numeri = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Filtra solo i numeri maggiori di 5\nnumeri_filtrati = filter(lambda x: x > 5, numeri)\n\n# filter() restituisce un iteratore, convertiamolo in lista per vederlo\nlista_filtrata = list(numeri_filtrati)\nprint(f\"Numeri > 5: {lista_filtrata}\")</code></pre>\n\n<h3><code>map(function, iterable)</code></h3>\n<p>La funzione <code>map()</code> applica <code>function</code> a ogni elemento di <code>iterable</code> e restituisce un iteratore con i risultati.</p>\n<pre><code class=\"language-python\">numeri = [1, 2, 3, 4, 5]\n\n# Calcola il quadrato di ogni numero\nquadrati = map(lambda x: x**2, numeri)\n\n# map() restituisce un iteratore, convertiamolo in lista\nlista_quadrati = list(quadrati)\nprint(f\"Quadrati: {lista_quadrati}\")</code></pre>\n\n<h2>Quando Usare Lambda?</h2>\n<p>Usa le lambda per funzioni molto semplici che ti servono \"al volo\", specialmente come argomenti per <code>sorted</code>, <code>map</code>, <code>filter</code>, o in altri contesti dove è richiesta una piccola funzione callback. Se la logica diventa più complessa di una singola espressione, o se hai bisogno di riutilizzare la funzione in più punti, definiscila con <code>def</code>.</p>",
  "exercise": "<p>1. Data la lista di stringhe <code>parole = [\"python\", \"è\", \"divertente\", \"ma\", \"difficile\"]</code>.</p>\n<p>2. Usa <code>sorted()</code> con una funzione lambda come <code>key</code> per ordinare la lista in base alla <strong>lunghezza</strong> delle parole (dalla più corta alla più lunga). Stampa la lista ordinata.</p>\n<p>3. Data la lista di numeri <code>numeri = [-5, 10, -2, 8, 0, -1]</code>.</p>\n<p>4. Usa <code>filter()</code> con una funzione lambda per creare un iteratore contenente solo i numeri <strong>positivi</strong> (maggiori di 0) dalla lista <code>numeri</code>.</p>\n<p>5. Converti l'iteratore del filtro in una lista e stampala.</p>\n<p>6. Usa <code>map()</code> con una funzione lambda per creare un iteratore contenente il valore assoluto di ogni numero nella lista <code>numeri</code> (usa la funzione built-in <code>abs()</code>).</p>\n<p>7. Converti l'iteratore della mappa in una lista e stampala.</p>",
  "defaultCode": "# 1. Lista di parole\nparole = [\"python\", \"è\", \"divertente\", \"ma\", \"difficile\"]\nprint(f\"Lista originale: {parole}\")\n\n# 2. Ordina per lunghezza\nparole_ordinate_lunghezza = sorted(parole, key=lambda parola: len(parola))\nprint(f\"Ordinate per lunghezza: {parole_ordinate_lunghezza}\")\n\n# 3. Lista di numeri\nnumeri = [-5, 10, -2, 8, 0, -1]\nprint(f\"\nNumeri originali: {numeri}\")\n\n# 4. Filtra numeri positivi\nnumeri_positivi_iter = filter(lambda n: n > 0, numeri)\n\n# 5. Converti filtro in lista e stampa\nlista_positivi = list(numeri_positivi_iter)\nprint(f\"Numeri positivi: {lista_positivi}\")\n\n# 6. Mappa a valore assoluto\nvalori_assoluti_iter = map(lambda n: abs(n), numeri)\n\n# 7. Converti mappa in lista e stampa\nlista_assoluti = list(valori_assoluti_iter)\nprint(f\"Valori assoluti: {lista_assoluti}\")"
}
