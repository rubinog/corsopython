{
  "id": "moduli_pacchetti",
  "title": "Moduli e Pacchetti: Riutilizzare il Codice",
  "explanation": "<h2>Moduli e Pacchetti: Estendere le Funzionalità di Python</h2>\n<p>Python ha un'enorme forza nella sua vasta <strong>libreria standard</strong> e nell'ecosistema di <strong>pacchetti di terze parti</strong>. Questi forniscono funzionalità pre-scritte per quasi ogni compito immaginabile, dal calcolo matematico alla gestione di reti, dall'analisi dati allo sviluppo web.</p>\n<p>Per usare queste funzionalità, dobbiamo importarle nel nostro script usando <strong>moduli</strong> e <strong>pacchetti</strong>.</p>\n\n<h2>Moduli: File di Codice Python</h2>\n<p>Un <strong>modulo</strong> è semplicemente un file Python (con estensione <code>.py</code>) che contiene definizioni (variabili, funzioni, classi). Possiamo importare un modulo per accedere alle definizioni al suo interno.</p>\n<p><strong>Metodi di Importazione:</strong></p>\n<ol>\n    <li><strong><code>import nome_modulo</code>:</strong> Importa l'intero modulo. Per accedere alle sue definizioni, devi usare la sintassi <code>nome_modulo.nome_definizione</code>. Questo crea un <em>namespace</em> separato per il modulo, evitando conflitti di nomi.</li>\n    <pre><code class=\"language-python\"># Importa il modulo 'math' per funzioni matematiche\nimport math\n\nradice_quadrata = math.sqrt(16) # Accede a sqrt() tramite math.\nprint(f\"Radice di 16: {radice_quadrata}\")\n\npi_greco = math.pi # Accede alla costante pi tramite math.\nprint(f\"Pi greco: {pi_greco}\")</code></pre>\n\n    <li><strong><code>from nome_modulo import nome_definizione1, nome_definizione2</code>:</strong> Importa solo definizioni specifiche dal modulo direttamente nel namespace corrente. Puoi usarle senza il prefisso del modulo.</li>\n    <pre><code class=\"language-python\"># Importa solo sqrt e pi da math\nfrom math import sqrt, pi\n\nradice_quadrata_2 = sqrt(25)\nprint(f\"Radice di 25: {radice_quadrata_2}\")\nprint(f\"Pi greco (diretto): {pi}\")</code></pre>\n    <p>⚠️ Attenzione: Importare troppe cose direttamente può portare a conflitti di nomi se definisci una variabile o funzione con lo stesso nome di quella importata.</p>\n\n    <li><strong><code>from nome_modulo import nome_definizione as alias</code>:</strong> Importa una definizione specifica dandole un nome alternativo (alias) nel tuo script. Utile per abbreviare nomi lunghi o evitare conflitti.</li>\n    <pre><code class=\"language-python\"># Importa randint da random come 'numero_casuale'\nfrom random import randint as numero_casuale\n\nnumero = numero_casuale(1, 10) # Usa l'alias\nprint(f\"Numero casuale tra 1 e 10: {numero}\")</code></pre>\n\n    <li><strong><code>import nome_modulo as alias_modulo</code>:</strong> Importa l'intero modulo dandogli un alias.</li>\n    <pre><code class=\"language-python\"># Importa datetime come 'dt'\nimport datetime as dt\n\nora_attuale = dt.datetime.now()\nprint(f\"Ora attuale (con alias): {ora_attuale}\")</code></pre>\n\n    <li><strong><code>from nome_modulo import *</code> (Sconsigliato):</strong> Importa <em>tutte</em> le definizioni dal modulo nel namespace corrente. È generalmente sconsigliato perché rende difficile capire da dove provengono le funzioni/variabili e aumenta notevolmente il rischio di conflitti di nomi.</li>\n</ol>\n\n<h2>La Libreria Standard di Python</h2>\n<p>Python viene fornito con una ricca libreria standard che include moduli per moltissimi compiti comuni:</p>\n<ul>\n    <li><code>math</code>: Funzioni matematiche (trigonometria, logaritmi, costanti come pi, e).</li>\n    <li><code>random</code>: Generazione di numeri casuali, scelte casuali.</li>\n    <li><code>datetime</code>: Lavorare con date e ore.</li>\n    <li><code>os</code>: Interagire con il sistema operativo (file, directory - limitato nel browser).</li>\n    <li><code>sys</code>: Parametri e funzioni specifiche dell'interprete.</li>\n    <li><code>json</code>: Lavorare con dati in formato JSON.</li>\n    <li><code>csv</code>: Leggere e scrivere file CSV.</li>\n    <li><code>sqlite3</code>: Interagire con database SQLite.</li>\n    <li><code>re</code>: Espressioni regolari per la manipolazione avanzata di stringhe.</li>\n    <li>...e molti altri!</li>\n</ul>\n<p>Puoi esplorare la documentazione ufficiale di Python per scoprire tutti i moduli disponibili.</p>\n\n<h2>Pacchetti: Collezioni di Moduli</h2>\n<p>Un <strong>pacchetto</strong> è una directory che contiene moduli Python e un file speciale <code>__init__.py</code> (che può anche essere vuoto). I pacchetti permettono di organizzare moduli correlati in una gerarchia.</p>\n<p>L'importazione da pacchetti usa la notazione col punto:</p>\n<pre><code class=\"language-python\"># Esempio ipotetico: importare una funzione da un sottomodulo\n# import mio_pacchetto.sottomodulo\n# risultato = mio_pacchetto.sottomodulo.mia_funzione()\n\n# Oppure:\n# from mio_pacchetto.sottomodulo import mia_funzione\n# risultato = mia_funzione()\n\n# Oppure:\n# from mio_pacchetto import sottomodulo\n# risultato = sottomodulo.mia_funzione()</code></pre>\n\n<h2>Pacchetti di Terze Parti e <code>pip</code></h2>\n<p>Oltre alla libreria standard, esiste un vastissimo ecosistema di pacchetti creati dalla comunità Python, disponibili tramite il <strong>Python Package Index (PyPI)</strong>.</p>\n<p>Per installare questi pacchetti nel tuo ambiente Python locale (non direttamente in questo ambiente browser, ma è fondamentale saperlo), si usa lo strumento a riga di comando <code>pip</code>:</p>\n<pre><code>pip install nome_pacchetto</code></pre>\n<p>Esempi di pacchetti popolari:</p>\n<ul>\n    <li><code>requests</code>: Per fare richieste HTTP (interagire con API web).</li>\n    <li><code>numpy</code>: Calcolo numerico scientifico (array multi-dimensionali).</li>\n    <li><code>pandas</code>: Analisi e manipolazione dati (DataFrame).</li>\n    <li><code>matplotlib</code> / <code>seaborn</code>: Creazione di grafici e visualizzazioni.</li>\n    <li><code>Django</code> / <code>Flask</code>: Framework per lo sviluppo web.</li>\n    <li><code>scikit-learn</code>: Machine learning.</li>\n</ul>\n<p>Pyodide (l'ambiente che usiamo qui) supporta l'installazione di molti pacchetti PyPI direttamente nel browser, come abbiamo visto con <code>pyodide.loadPackage()</code>.</p>\n<p>L'uso di moduli e pacchetti è essenziale per scrivere codice Python efficace, sfruttando il lavoro già fatto da altri e mantenendo il proprio codice organizzato.</p>",
  "exercise": "<p>1. Importa l'intero modulo <code>random</code>.</p>\n<p>2. Genera e stampa un numero intero casuale tra 50 e 100 (inclusi) usando <code>random.randint()</code>.</p>\n<p>3. Importa solo la funzione <code>datetime</code> dal modulo <code>datetime</code>.</p>\n<p>4. Ottieni e stampa l'anno corrente usando <code>datetime.now().year</code>.</p>\n<p>5. Importa il modulo <code>math</code> con l'alias <code>m</code>.</p>\n<p>6. Calcola e stampa il coseno di pi greco (π) usando l'alias <code>m</code> e le costanti/funzioni appropriate (<code>m.cos()</code>, <code>m.pi</code>).</p>",
  "defaultCode": "# 1. Importa random\nimport random\n\n# 2. Genera intero casuale\nnumero_casuale = random.randint(50, 100)\nprint(f\"Numero casuale tra 50 e 100: {numero_casuale}\")\n\n# 3. Importa datetime da datetime\nfrom datetime import datetime\n\n# 4. Ottieni anno corrente\nanno_corrente = datetime.now().year\nprint(f\"Anno corrente: {anno_corrente}\")\n\n# 5. Importa math con alias m\nimport math as m\n\n# 6. Calcola coseno di pi greco\ncoseno_pi = m.cos(m.pi)\nprint(f\"Coseno di pi greco: {coseno_pi}\") # Dovrebbe essere -1.0"
}
