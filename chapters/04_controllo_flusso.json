{
  "id": "controllo_flusso",
  "title": "Controllo del Flusso (if/elif/else)",
  "explanation": "<h2>Prendere Decisioni: L'Istruzione <code>if</code></h2>\n<p>Finora il nostro codice è stato eseguito linearmente, una riga dopo l'altra. Ma spesso abbiamo bisogno che il programma prenda decisioni e si comporti diversamente a seconda delle situazioni. Qui entra in gioco l'istruzione <code>if</code>.</p>\n<p>L'<code>if</code> permette di eseguire un blocco di codice <strong>solo se</strong> una determinata condizione è vera (valutata come <code>True</code>).</p>\n<pre><code class=\"language-python\">temperatura = 25\n\n# La condizione è temperatura > 20\nif temperatura > 20:\n    # Questo blocco viene eseguito solo se la condizione è True\n    print(\"Fa caldo! È ora di un gelato.\")\n    print(\"Ricorda di bere acqua.\")\n\nprint(\"Controllo temperatura terminato.\") # Questa riga viene eseguita sempre\n</code></pre>\n<p><strong>Anatomia dell'<code>if</code>:</strong></p>\n<ul>\n    <li>Inizia con la parola chiave <code>if</code>.</li>\n    <li>Segue la <strong>condizione</strong> da valutare (un'espressione che risulta <code>True</code> o <code>False</code>, spesso usando operatori di confronto e logici).</li>\n    <li>Termina con i due punti <code>:</code>.</li>\n    <li>Le righe di codice da eseguire se la condizione è vera devono essere <strong>indentate</strong> (spostate a destra, solitamente di 4 spazi). L'indentazione è fondamentale in Python per definire i blocchi di codice!</li>\n</ul>\n\n<h2>L'Alternativa: L'Istruzione <code>else</code></h2>\n<p>Cosa succede se la condizione dell'<code>if</code> è falsa? Possiamo specificare un blocco di codice alternativo da eseguire usando <code>else</code>.</p>\n<pre><code class=\"language-python\">temperatura = 15\n\nif temperatura > 20:\n    print(\"Fa caldo!\")\nelse: # Eseguito se temperatura > 20 è False\n    print(\"Non fa molto caldo.\")\n    print(\"Forse è meglio una felpa.\")\n\nprint(\"Controllo temperatura terminato.\")\n</code></pre>\n<p>L'<code>else</code> non ha una condizione propria; si lega all'<code>if</code> immediatamente precedente e viene eseguito solo se la condizione di quell'<code>if</code> è <code>False</code>. Anche il blocco <code>else</code> richiede i due punti <code>:</code> e l'indentazione.</p>\n\n<h2>Controlli Multipli: L'Istruzione <code>elif</code> (Else If)</h2>\n<p>A volte abbiamo bisogno di controllare più condizioni in sequenza. Se la prima è falsa, controlliamo la seconda, poi la terza, e così via. Per questo usiamo <code>elif</code> (abbreviazione di \"else if\").</p>\n<pre><code class=\"language-python\">voto = 75\n\nif voto >= 90:\n    print(\"Risultato: Ottimo (A)\")\nelif voto >= 80: # Controllato solo se voto >= 90 è False\n    print(\"Risultato: Distinto (B)\")\nelif voto >= 70: # Controllato solo se le precedenti sono False\n    print(\"Risultato: Buono (C)\")\nelif voto >= 60: # Controllato solo se le precedenti sono False\n    print(\"Risultato: Sufficiente (D)\")\nelse: # Eseguito solo se TUTTE le condizioni precedenti sono False\n    print(\"Risultato: Insufficiente (F)\")\n\nprint(\"Valutazione completata.\")\n</code></pre>\n<p><strong>Come funziona la catena <code>if/elif/else</code>:</strong></p>\n<ol>\n    <li>Python valuta la condizione dell'<code>if</code>. Se è <code>True</code>, esegue il suo blocco e salta tutti gli <code>elif</code> e l'<code>else</code> successivi.</li>\n    <li>Se la condizione dell'<code>if</code> è <code>False</code>, passa al primo <code>elif</code> e ne valuta la condizione. Se è <code>True</code>, esegue il suo blocco e salta il resto.</li>\n    <li>Continua così per ogni <code>elif</code>.</li>\n    <li>Se nessuna delle condizioni dell'<code>if</code> e degli <code>elif</code> è <code>True</code>, viene eseguito il blocco dell'<code>else</code> (se presente).</li>\n</ol>\n<p>Puoi avere quanti <code>elif</code> vuoi, ma solo un <code>if</code> all'inizio e al massimo un <code>else</code> alla fine.</p>\n\n<h2>Condizioni Complesse e Nidificazione</h2>\n<p>Le condizioni possono usare gli operatori logici <code>and</code>, <code>or</code>, <code>not</code> per combinare più verifiche.</p>\n<pre><code class=\"language-python\">eta = 22\nha_patente = True\n\nif eta >= 18 and ha_patente:\n    print(\"Può guidare l'auto.\")\nelse:\n    print(\"Non può guidare l'auto.\")\n</code></pre>\n<p>Puoi anche \"nidificare\" istruzioni <code>if</code> una dentro l'altra, ma fai attenzione a non rendere il codice troppo complesso e difficile da leggere. L'indentazione diventa ancora più importante!</p>\n<pre><code class=\"language-python\">punteggio = 85\nha_completato_tutorial = False\n\nif punteggio >= 70:\n    print(\"Livello base superato.\")\n    if ha_completato_tutorial:\n        print(\"Bonus sbloccato!\")\n    else:\n        print(\"Completa il tutorial per ottenere un bonus.\")\nelse:\n    print(\"Livello non superato.\")\n</code></pre>\n\n<h2>Valori \"Truthy\" e \"Falsy\"</h2>\n<p>In Python, non solo <code>True</code> e <code>False</code> vengono considerati in contesti booleani. Molti altri valori hanno una \"veridicità\" implicita:</p>\n<ul>\n    <li><strong>Falsy (considerati Falsi):</strong> <code>False</code>, <code>None</code> (un valore speciale che indica assenza di valore), zero numerico (<code>0</code>, <code>0.0</code>), stringhe vuote (<code>\"\"</code>, <code>''</code>), liste/tuple/dizionari/set vuoti (<code>[]</code>, <code>()</code>, <code>{}</code>, <code>set()</code>).</li>\n    <li><strong>Truthy (considerati Veri):</strong> Praticamente tutto il resto (<code>True</code>, numeri diversi da zero, stringhe non vuote, liste/tuple/ecc. non vuote).</li>\n</ul>\n<p>Questo permette di scrivere condizioni più concise:</p>\n<pre><code class=\"language-python\">nome_utente = \"Luigi\"\nlista_oggetti = [1, 2]\n\nif nome_utente: # Equivalente a: if nome_utente != \"\"\n    print(f\"Benvenuto, {nome_utente}!\")\nelse:\n    print(\"Nome utente non fornito.\")\n\nif lista_oggetti: # Equivalente a: if len(lista_oggetti) > 0\n    print(\"La lista contiene elementi.\")\nelse:\n    print(\"La lista è vuota.\")\n</code></pre>\n<p>Padroneggiare <code>if</code>, <code>elif</code> e <code>else</code> è fondamentale per creare programmi che reagiscono dinamicamente a input e situazioni diverse.</p>",
  "exercise": "<p>Scrivi un programma che simuli un semplice controllo accessi:</p>\n<ol>\n    <li>Crea una variabile <code>ruolo_utente</code> e assegnale una stringa: \"admin\", \"editor\" o \"visitatore\".</li>\n    <li>Crea una variabile booleana <code>utente_loggato</code> e impostala a <code>True</code> o <code>False</code>.</li>\n    <li>Usando <code>if</code>, <code>elif</code>, <code>else</code> e l'operatore <code>and</code>:\n        <ul>\n            <li>Se l'utente è loggato <strong>E</strong> il suo ruolo è \"admin\", stampa \"Accesso completo al pannello di amministrazione.\".</li>\n            <li>Altrimenti, se l'utente è loggato <strong>E</strong> il suo ruolo è \"editor\", stampa \"Accesso limitato alla modifica dei contenuti.\".</li>\n            <li>Altrimenti, se l'utente è loggato (indipendentemente dal ruolo, ma non admin o editor), stampa \"Accesso base all'area utenti.\".</li>\n            <li>Altrimenti (se l'utente non è loggato), stampa \"Accesso negato. Effettua il login.\".</li>\n        </ul>\n    </li>\n    <li>Prova a cambiare i valori di <code>ruolo_utente</code> e <code>utente_loggato</code> per vedere come cambia l'output.</li>\n</ol>",
  "defaultCode": "# 1. Ruolo utente\nruolo_utente = \"editor\" # Prova a cambiare in \"admin\", \"visitatore\" o altro\n\n# 2. Stato login\nutente_loggato = True # Prova a cambiare in False\n\n# 3. Controllo accessi\nif utente_loggato and ruolo_utente == \"admin\":\n    print(\"Accesso completo al pannello di amministrazione.\")\nelif utente_loggato and ruolo_utente == \"editor\":\n    print(\"Accesso limitato alla modifica dei contenuti.\")\nelif utente_loggato: # Se è loggato ma non admin/editor\n    print(\"Accesso base all'area utenti.\")\nelse: # Se utente_loggato è False\n    print(\"Accesso negato. Effettua il login.\")\n\nprint(\"-- Fine controllo --\")"
}
