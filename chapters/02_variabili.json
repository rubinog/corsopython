{
  "id": "variabili_tipi",
  "title": "Variabili e Tipi di Dati",
  "explanation": "<h2>Variabili: Contenitori Etichettati per i Dati</h2>\n<p>In programmazione, abbiamo costantemente bisogno di memorizzare e manipolare informazioni (dati). Le <strong>variabili</strong> sono i nostri contenitori per questi dati.</p>\n<p>Immagina una variabile come un'etichetta che applichi a una scatola. La scatola contiene un dato (un numero, del testo, ecc.) e l'etichetta (il nome della variabile) ti permette di ritrovare e usare quel dato facilmente. In Python, crei una variabile (assegni un'etichetta) usando l'operatore di assegnamento <code>=</code>.</p>\n<pre><code class=\"language-python\"># Assegniamo il testo \"Alice\" alla variabile 'nome_utente'\nnome_utente = \"Alice\"\n\n# Assegniamo il numero intero 30 alla variabile 'eta_utente'\neta_utente = 30\n\n# Assegniamo il numero decimale 1.75 alla variabile 'altezza_metri'\naltezza_metri = 1.75\n\n# Assegniamo il valore booleano True alla variabile 'is_studente'\nis_studente = True</code></pre>\n<p><strong>Nomi delle Variabili (Identificatori):</strong></p>\n<ul>\n    <li>Devono iniziare con una lettera (a-z, A-Z) o un underscore (<code>_</code>).</li>\n    <li>Possono contenere lettere, numeri (0-9) e underscore.</li>\n    <li>Sono <em>case-sensitive</em>: <code>miaVariabile</code> è diversa da <code>miavariabile</code>.</li>\n    <li>Non possono essere parole chiave riservate di Python (come <code>if</code>, <code>else</code>, <code>for</code>, <code>while</code>, <code>def</code>, <code>class</code>, ecc.).</li>\n    <li>È buona norma usare nomi descrittivi e lo stile <em>snake_case</em> (parole separate da underscore) per la leggibilità: <code>numero_di_scarpe</code> è meglio di <code>nds</code>.</li>\n</ul>\n<p>Puoi cambiare il valore (il contenuto della scatola) associato a una variabile semplicemente riassegnandolo:</p>\n<pre><code class=\"language-python\">punteggio = 100\nprint(punteggio) # Output: 100\npunteggio = 150 # Ora la variabile 'punteggio' contiene 150\nprint(punteggio) # Output: 150</code></pre>\n\n<h2>Tipi di Dati Fondamentali: La Natura dei Dati</h2>\n<p>Python è un linguaggio a <strong>tipizzazione dinamica</strong>. Significa che non devi dichiarare esplicitamente il tipo di una variabile (come faresti in altri linguaggi come Java o C++); Python lo capisce automaticamente dal valore che le assegni.</p>\n<p>I tipi di dati fondamentali che incontrerai più spesso sono:</p>\n<ul>\n    <li><strong>Stringhe (<code>str</code>):</strong> Rappresentano testo. Si definiscono racchiudendo i caratteri tra virgolette singole (<code>'...'</code>) o doppie (<code>\"...\"</code>). Puoi usare le une o le altre, ma sii consistente. Se la stringa stessa deve contenere un apice, usa le virgolette doppie per delimitarla, e viceversa.\n        <pre><code class=\"language-python\">saluto = \"Ciao a tutti!\"\nfrase = 'Il linguaggio Python è potente.'\ncitazione = \"Lui disse: 'Imparare è divertente!'\"</code></pre>\n    </li>\n    <li><strong>Numeri Interi (<code>int</code>):</strong> Numeri senza parte decimale (positivi, negativi o zero).\n        <pre><code class=\"language-python\">anno_corrente = 2024\ntemperatura_minima = -5\nnumero_oggetti = 0</code></pre>\n    </li>\n    <li><strong>Numeri Decimali (<code>float</code>):</strong> Numeri in virgola mobile (in Python si usa il punto <code>.</code> come separatore decimale).\n        <pre><code class=\"language-python\">prezzo_benzina = 1.89\npi_greco = 3.14159\npercentuale = 75.5</code></pre>\n         <p><em>Nota:</em> Anche se scrivi <code>numero = 10.0</code>, Python lo considererà un <code>float</code> a causa del punto decimale.</p>\n    </li>\n    <li><strong>Booleani (<code>bool</code>):</strong> Rappresentano valori di verità: possono essere solo <code>True</code> (Vero) o <code>False</code> (Falso). Sono cruciali per prendere decisioni nel codice (controllo del flusso). Nota che <code>True</code> e <code>False</code> iniziano con la lettera maiuscola.\n        <pre><code class=\"language-python\">login_effettuato = True\nemail_verificata = False</code></pre>\n    </li>\n</ul>\n<p>Puoi scoprire il tipo di una variabile usando la funzione <code>type()</code>:</p>\n<pre><code class=\"language-python\">x = 10\ny = \"Testo\"\nz = 3.14\nprint(type(x)) # Output: <class 'int'>\nprint(type(y)) # Output: <class 'str'>\nprint(type(z)) # Output: <class 'float'></code></pre>\n\n<h2>Visualizzare i Valori: La Funzione <code>print()</code></h2>\n<p>Come già visto, <code>print()</code> è essenziale per mostrare l'output del tuo programma, incluso il valore contenuto nelle variabili.</p>\n<pre><code class=\"language-python\">nome_utente = \"Mario\"\npunti_gioco = 550\nprint(nome_utente)\nprint(punti_gioco)\nprint(\"Benvenuto\", nome_utente, \"Hai totalizzato\", punti_gioco, \"punti.\")\n# Nota: print() aggiunge automaticamente uno spazio tra gli elementi separati da virgola.</code></pre>\n\n<h2>⚠️ Insidia Comune: Mescolare Stringhe e Numeri con <code>+</code></h2>\n<p>L'operatore <code>+</code> ha un doppio significato:</p>\n<ul>\n    <li>Tra numeri, esegue la somma matematica.</li>\n    <li>Tra stringhe, esegue la <strong>concatenazione</strong> (unisce le stringhe).</li>\n</ul>\n<pre><code class=\"language-python\">num1 = 10\nnum2 = 5\nprint(num1 + num2) # Output: 15 (somma)\n\nstr1 = \"Ciao \"\nstr2 = \"Mondo\"\nprint(str1 + str2) # Output: Ciao Mondo (concatenazione)</code></pre>\n<p>Il problema sorge quando provi a usare <code>+</code> tra una stringa e un numero. Python non sa se vuoi fare una somma o unire del testo, quindi solleva un errore <code>TypeError</code>.</p>\n<pre><code class=\"language-python\"># QUESTO CODICE DARÀ ERRORE!\neta = 30\n# print(\"L'utente ha \" + eta + \" anni.\") # TypeError: can only concatenate str (not \"int\") to str\n</code></pre>\n<p><strong>Soluzioni:</strong></p>\n<ol>\n    <li><strong>Convertire il numero in stringa con <code>str()</code>:</strong> Puoi dire esplicitamente a Python di trattare il numero come testo prima di unirlo.\n        <pre><code class=\"language-python\">eta = 30\nprint(\"L'utente ha \" + str(eta) + \" anni.\") # Output: L'utente ha 30 anni.</code></pre>\n    </li>\n    <li><strong>Usare le f-string (Metodo Moderno e Consigliato):</strong> Le f-string (stringhe formattate, introdotte in Python 3.6) sono il modo più pulito e leggibile. Metti una <code>f</code> prima delle virgolette e inserisci le variabili o espressioni direttamente tra parentesi graffe <code>{}</code>. Python gestirà la conversione automaticamente.\n        <pre><code class=\"language-python\">eta = 30\nnome = \"Giulia\"\nprint(f\"L'utente {nome} ha {eta} anni.\") # Output: L'utente Giulia ha 30 anni.</code></pre>\n        <p>Puoi anche mettere espressioni complesse nelle graffe: <code>print(f\"Il doppio dell'età è {eta * 2}.\")</code></p>\n    </li>\n    <li><strong>Passare elementi multipli a <code>print()</code>:</strong> Come visto prima, <code>print()</code> può accettare più argomenti separati da virgola e li stamperà separati da spazi. Questo funziona ma offre meno controllo sulla formattazione rispetto alle f-string.\n        <pre><code class=\"language-python\">eta = 30\nprint(\"L'utente ha\", eta, \"anni.\") # Output: L'utente ha 30 anni.</code></pre>\n    </li>\n</ol>\n<p>Imparare a gestire i tipi di dati e le conversioni è fondamentale per evitare errori comuni.</p>",
  "exercise": "<p>1. Crea una variabile <code>nome_prodotto</code> e assegnale il nome di un oggetto (es. \"Tastiera\").</p>\n<p>2. Crea una variabile <code>costo_unitario</code> e assegnale un valore numerico con decimali (es. 75.99).</p>\n<p>3. Crea una variabile <code>numero_pezzi</code> e assegnale un numero intero (es. 2).</p>\n<p>4. Calcola il costo totale moltiplicando <code>costo_unitario</code> per <code>numero_pezzi</code> e memorizzalo in una variabile <code>costo_totale</code>.</p>\n<p>5. Verifica il tipo di dato della variabile <code>costo_totale</code> usando <code>type()</code> e stampalo.</p>\n<p>6. Usando una <strong>f-string</strong>, stampa una frase che riassume l'ordine, mostrando il numero di pezzi, il nome del prodotto e il costo totale. Esempio: \"Ordine: 2 x Tastiera - Costo Totale: 151.98 euro.\"</p>"
}
