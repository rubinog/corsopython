{
  "id": "tuple",
  "title": "Tuple: Sequenze Ordinate e Immutabili",
  "explanation": "<h2>Tuple: Collezioni Fisse</h2>\n<p>Le tuple (<code>tuple</code>) sono un altro tipo di sequenza in Python, molto simili alle liste, ma con una differenza fondamentale: sono <strong>immutabili</strong>. Una volta creata una tupla, non puoi modificarne il contenuto (né aggiungere, né rimuovere, né cambiare elementi).</p>\n<p>Caratteristiche principali:</p>\n<ul>\n    <li><strong>Ordinate:</strong> Mantengono l'ordine degli elementi.</li>\n    <li><strong>Immutabili:</strong> Non possono essere modificate dopo la creazione.</li>\n    <li><strong>Eterogenee:</strong> Possono contenere elementi di tipi diversi.</li>\n    <li><strong>Indicizzate:</strong> Puoi accedere agli elementi tramite indice numerico (a partire da 0), proprio come le liste.</li>\n</ul>\n\n<h2>Creare una Tupla</h2>\n<p>Si creano usando parentesi tonde <code>()</code> e separando gli elementi con virgole. Le parentesi sono tecnicamente opzionali in molti casi, ma è buona norma usarle per chiarezza.</p>\n<pre><code class=\"language-python\"># Tupla vuota\ntupla_vuota = ()\ntupla_vuota_alt = tuple()\n\n# Tupla di numeri\nnumeri = (1, 2, 3)\n\n# Tupla di stringhe\ngiorni = (\"Lunedì\", \"Martedì\", \"Mercoledì\")\n\n# Tupla mista\nmista = (\"testo\", 10, True)\n\n# Le parentesi sono opzionali (ma consigliate)\naltra_tupla = 4, 5, 6\nprint(type(altra_tupla)) # Output: <class 'tuple'>\n\n# !!! Attenzione: Creare una tupla con un solo elemento\n# Questo NON è una tupla:\nsingolo_non_tupla = (10)\nprint(type(singolo_non_tupla)) # Output: <class 'int'>\n\n# Per creare una tupla con un solo elemento, serve la virgola finale:\nsingolo_tupla = (10,)\nprint(type(singolo_tupla)) # Output: <class 'tuple'>\n\nprint(numeri)\nprint(giorni)\nprint(singolo_tupla)</code></pre>\n\n<h2>Accedere agli Elementi: Indicizzazione e Slicing</h2>\n<p>Funzionano esattamente come per le liste.</p>\n<pre><code class=\"language-python\">coordinate = (10.5, 25.0, 100.2)\n\n# Indicizzazione\nx = coordinate[0]\nprint(f\"Coordinata X: {x}\") # Output: 10.5\n\nultimo = coordinate[-1]\nprint(f\"Ultima coordinata: {ultimo}\") # Output: 100.2\n\n# Slicing\nprimi_due = coordinate[:2]\nprint(f\"Prime due coordinate: {primi_due}\") # Output: (10.5, 25.0)\n\n# Tentativo di modifica (causerà errore!)\n# coordinate[0] = 11.0 # TypeError: 'tuple' object does not support item assignment</code></pre>\n<p>L'immutabilità è la caratteristica chiave: qualsiasi tentativo di modificare un elemento tramite il suo indice risulterà in un <code>TypeError</code>.</p>\n\n<h2>Perché Usare le Tuple?</h2>\n<p>Se non si possono modificare, perché usarle invece delle liste?</p>\n<ul>\n    <li><strong>Integrità dei Dati:</strong> Garantiscono che una collezione di elementi rimanga costante. Utile per rappresentare dati che non dovrebbero cambiare, come le coordinate RGB di un colore (es. <code>(255, 0, 0)</code> per il rosso).</li>\n    <li><strong>Performance:</strong> Le tuple possono essere leggermente più veloci da creare e iterare rispetto alle liste in alcune situazioni, poiché Python sa che la loro dimensione e contenuto non cambieranno.</li>\n    <li><strong>Uso come Chiavi di Dizionario:</strong> Essendo immutabili, le tuple (che contengono solo elementi immutabili) possono essere usate come chiavi nei dizionari, a differenza delle liste.</li>\n    <pre><code class=\"language-python\"># Esempio: usare tuple come chiavi per coordinate\nmappa_valori = {\n    (0, 0): \"Origine\",\n    (1, 0): \"Est\",\n    (0, 1): \"Nord\"\n}\nprint(mappa_valori[(0, 1)]) # Output: Nord\n\n# Questo non sarebbe possibile con le liste:\n# chiave_lista = [0, 0]\n# diz_errato = {chiave_lista: \"Origine\"} # TypeError: unhashable type: 'list'</code></pre>\n    <li><strong>Restituzione di Valori Multipli da Funzioni:</strong> Le funzioni possono restituire facilmente valori multipli sotto forma di tupla (spesso senza nemmeno bisogno delle parentesi).</li>\n</ul>\n\n<h2>Unpacking (Spacchettamento) delle Tuple</h2>\n<p>Puoi assegnare gli elementi di una tupla a variabili individuali in una sola istruzione.</p>\n<pre><code class=\"language-python\">punto = (10, 20)\n\n# Unpacking\nx, y = punto\n\nprint(f\"x = {x}, y = {y}\") # Output: x = 10, y = 20\n\n# Utile con il return delle funzioni\ndef get_coordinate():\n    return (5, -3) # Restituisce una tupla\n\ncoord_x, coord_y = get_coordinate() # Unpacking diretto\nprint(f\"Coordinate ricevute: X={coord_x}, Y={coord_y}\")</code></pre>\n<p>Il numero di variabili a sinistra deve corrispondere al numero di elementi nella tupla, altrimenti otterrai un <code>ValueError</code>.</p>\n\n<h2>Metodi delle Tuple</h2>\n<p>A causa della loro immutabilità, le tuple hanno solo due metodi principali:</p>\n<ul>\n    <li><code>tupla.count(valore)</code>: Conta quante volte <code>valore</code> appare nella tupla.</li>\n    <li><code>tupla.index(valore)</code>: Restituisce l'indice della prima occorrenza di <code>valore</code> (causa <code>ValueError</code> se non trovato).</li>\n</ul>\n<pre><code class=\"language-python\">numeri_ripetuti = (1, 2, 1, 3, 1, 4)\nprint(f\"Conteggio di '1': {numeri_ripetuti.count(1)}\") # Output: 3\nprint(f\"Indice del primo '3': {numeri_ripetuti.index(3)}\") # Output: 3</code></pre>\n<p>In sintesi, usa le tuple quando hai bisogno di una sequenza ordinata di elementi che non deve cambiare.</p>",
  "exercise": "<p>1. Crea una tupla chiamata <code>info_persona</code> contenente il nome (stringa), l'età (int) e la città (stringa) di una persona immaginaria.</p>\n<p>2. Stampa il secondo elemento della tupla (l'età).</p>\n<p>3. Usa l'unpacking per assegnare i tre elementi della tupla a tre variabili separate: <code>nome</code>, <code>eta</code>, <code>citta</code>.</p>\n<p>4. Stampa le tre variabili create con l'unpacking.</p>\n<p>5. Crea una tupla <code>valori = (5, 10, 15, 10, 20)</code>. Usa il metodo <code>count()</code> per contare quante volte appare il numero 10 e stampa il risultato.</p>\n<p>6. Prova ad aggiungere un elemento alla tupla <code>info_persona</code> (questo dovrebbe generare un errore, dimostrando l'immutabilità).</p>",
  "defaultCode": "# 1. Crea la tupla info_persona\ninfo_persona = (\"Alice\", 30, \"Roma\")\nprint(f\"Tupla: {info_persona}\")\n\n# 2. Stampa il secondo elemento\nprint(f\"Età: {info_persona[1]}\")\n\n# 3. Unpacking\nnome, eta, citta = info_persona\n\n# 4. Stampa le variabili spacchettate\nprint(f\"\nDopo unpacking:\")\nprint(f\"Nome: {nome}\")\nprint(f\"Eta: {eta}\")\nprint(f\"Citta: {citta}\")\n\n# 5. Conta occorrenze\nvalori = (5, 10, 15, 10, 20)\nconteggio_10 = valori.count(10)\nprint(f\"\nIl numero 10 appare {conteggio_10} volte in {valori}\")\n\n# 6. Prova a modificare (causerà errore)\nprint(\"\nTentativo di modifica (causerà errore):\")\ntry:\n    # Le tuple non hanno append\n    info_persona.append(\"Nuovo Valore\")\nexcept AttributeError as e:\n    print(f\"Errore previsto (AttributeError): {e}\")\ntry:\n    # Non si può assegnare a un indice\n    info_persona[0] = \"Bob\"\nexcept TypeError as e:\n    print(f\"Errore previsto (TypeError): {e}\")"
}
