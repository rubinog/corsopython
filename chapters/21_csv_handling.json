{
  "id": "csv_handling",
  "title": "Lavorare con File CSV",
  "explanation": "<h2>Lavorare con File CSV: Dati Tabellari Semplici</h2>\n<p>Il formato CSV (Comma-Separated Values) è un modo molto comune per memorizzare dati tabellari (come fogli di calcolo o tabelle di database) in un file di testo semplice. Ogni riga del file rappresenta una riga di dati, e i valori all'interno di una riga sono separati da un delimitatore, solitamente una virgola (<code>,</code>).</p>\n<p>Python fornisce il modulo integrato <code>csv</code> per facilitare la lettura e la scrittura di file CSV, gestendo correttamente i dettagli come le virgole all'interno dei campi (usando le virgolette) e i diversi delimitatori.</p>\n<p><strong>⚠️ Limitazioni nel Browser:</strong> Come per l'I/O generico su file, useremo <code>io.StringIO</code> per simulare i file CSV in memoria in questo ambiente.</p>\n\n<h2>Leggere File CSV</h2>\n<p>Il modulo <code>csv</code> offre due modi principali per leggere i dati:</p>\n\n<h3>1. <code>csv.reader</code>: Leggere come Liste</h3>\n<p><code>csv.reader</code> tratta ogni riga del file CSV come una lista di stringhe.</p>\n<pre><code class=\"language-python\">import csv\nimport io\n\n# Simuliamo un file CSV\ncsv_data_string = \"\"\"ID,Nome,Citta\n1,Alice,New York\n2,Bob,\"Los Angeles\"\n3,Charlie,Chicago\"\"\"\n\nfile_simulato = io.StringIO(csv_data_string)\n\n# Crea un oggetto reader\ncsv_reader = csv.reader(file_simulato)\n\nprint(\"--- Lettura con csv.reader ---\")\ntry:\n    # Leggere l'intestazione (opzionale)\n    header = next(csv_reader)\n    print(f\"Intestazione: {header}\")\n\n    # Iterare sulle righe rimanenti\n    for riga in csv_reader:\n        # Ogni 'riga' è una lista di stringhe\n        print(f\"Riga: {riga} (ID: {riga[0]}, Nome: {riga[1]}, Città: {riga[2]})\")\nexcept StopIteration:\n    print(\"File CSV vuoto o già letto.\")\nexcept Exception as e:\n    print(f\"Errore durante la lettura CSV: {e}\")\nfinally:\n    file_simulato.close()</code></pre>\n<p>Nota che tutti i valori letti sono stringhe, anche se sembrano numeri. Dovrai convertirli esplicitamente (es. <code>int(riga[0])</code>) se necessario.</p>\n\n<h3>2. <code>csv.DictReader</code>: Leggere come Dizionari</h3>\n<p><code>csv.DictReader</code> è spesso più comodo perché tratta ogni riga come un dizionario, dove le chiavi sono prese dalla riga di intestazione (la prima riga del file).</p>\n<pre><code class=\"language-python\">import csv\nimport io\n\ncsv_data_string = \"\"\"ID,Nome,Citta\n1,Alice,New York\n2,Bob,\"Los Angeles\"\n3,Charlie,Chicago\"\"\"\n\nfile_simulato = io.StringIO(csv_data_string)\n\n# Crea un oggetto DictReader\n# L'intestazione viene letta automaticamente\ncsv_dict_reader = csv.DictReader(file_simulato)\n\nprint(\"\n--- Lettura con csv.DictReader ---\")\ntry:\n    # Iterare sulle righe (dizionari)\n    for riga_dict in csv_dict_reader:\n        # Ogni 'riga_dict' è un dizionario\n        print(f\"Riga: {riga_dict} (ID: {riga_dict['ID']}, Nome: {riga_dict['Nome']})\")\nexcept Exception as e:\n    print(f\"Errore durante la lettura CSV (DictReader): {e}\")\nfinally:\n    file_simulato.close()</code></pre>\n<p>Questo rende l'accesso ai dati più leggibile (<code>riga_dict['Nome']</code> invece di <code>riga[1]</code>).</p>\n\n<h2>Scrivere File CSV</h2>\n<p>Analogamente, ci sono due oggetti principali per la scrittura:</p>\n\n<h3>1. <code>csv.writer</code>: Scrivere da Liste</h3>\n<p><code>csv.writer</code> permette di scrivere dati organizzati come liste (o altri iterabili) nel file CSV.</p>\n<ul>\n    <li><code>writer.writerow(lista)</code>: Scrive una singola riga nel file CSV dalla <code>lista</code>.</li>\n    <li><code>writer.writerows(lista_di_liste)</code>: Scrive più righe, dove ogni elemento della <code>lista_di_liste</code> è una lista che rappresenta una riga.</li>\n</ul>\n<pre><code class=\"language-python\">import csv\nimport io\n\n# Dati da scrivere (lista di liste)\ndati_da_scrivere = [\n    [\"Marca\", \"Modello\", \"Anno\"], # Intestazione\n    [\"Fiat\", \"Panda\", 2022],\n    [\"Tesla\", \"Model 3\", 2023],\n    [\"Ford\", \"Focus\", 2021]\n]\n\noutput_simulato = io.StringIO()\n\n# Crea un oggetto writer\n# newline='' è importante per evitare righe vuote extra su alcuni sistemi\ncsv_writer = csv.writer(output_simulato, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n\nprint(\"\n--- Scrittura con csv.writer ---\")\ntry:\n    # Scrivere l'intestazione\n    # csv_writer.writerow(dati_da_scrivere[0])\n    # Scrivere le righe di dati\n    # csv_writer.writerows(dati_da_scrivere[1:])\n    \n    # Oppure scrivere tutto in una volta\n    csv_writer.writerows(dati_da_scrivere)\n    \n    print(\"Dati scritti nel file simulato.\")\n    print(\"Contenuto generato:\")\n    print(output_simulato.getvalue())\nexcept Exception as e:\n    print(f\"Errore durante la scrittura CSV: {e}\")\nfinally:\n    output_simulato.close()</code></pre>\n<p><strong>Parametri Utili del Writer:</strong></p>\n<ul>\n    <li><code>delimiter</code>: Il carattere usato per separare i campi (default: <code>','</code>). Puoi usare <code>'\t'</code> per file TSV (Tab-Separated Values) o <code>';'</code>.</li>\n    <li><code>quotechar</code>: Il carattere usato per racchiudere i campi che contengono il delimitatore o caratteri speciali (default: <code>'\"'</code>).</li>\n    <li><code>quoting</code>: Controlla quando le virgolette vengono aggiunte (es. <code>csv.QUOTE_MINIMAL</code>, <code>csv.QUOTE_ALL</code>, <code>csv.QUOTE_NONNUMERIC</code>).</li>\n</ul>\n\n<h3>2. <code>csv.DictWriter</code>: Scrivere da Dizionari</h3>\n<p><code>csv.DictWriter</code> è utile quando i tuoi dati sono organizzati come una lista di dizionari.</p>\n<ul>\n    <li>Richiede l'elenco dei nomi dei campi (<code>fieldnames</code>) durante la creazione, che definisce l'ordine delle colonne.</li>\n    <li><code>writer.writeheader()</code>: Scrive la riga di intestazione usando i <code>fieldnames</code>.</li>\n    <li><code>writer.writerow(dizionario)</code>: Scrive una riga usando i valori dal <code>dizionario</code>. Le chiavi del dizionario devono corrispondere ai <code>fieldnames</code>.</li>\n    <li><code>writer.writerows(lista_di_dizionari)</code>: Scrive più righe.</li>\n</ul>\n<pre><code class=\"language-python\">import csv\nimport io\n\n# Dati da scrivere (lista di dizionari)\ndati_dict_da_scrivere = [\n    {'ID': 1, 'Prodotto': 'Laptop', 'Prezzo': 1200.50},\n    {'ID': 2, 'Prodotto': 'Mouse', 'Prezzo': 25.99},\n    {'ID': 3, 'Prodotto': 'Tastiera', 'Prezzo': 75.00}\n]\n\n# Definisci i nomi dei campi (ordine delle colonne)\nnomi_campi = ['ID', 'Prodotto', 'Prezzo']\n\noutput_simulato_dict = io.StringIO()\n\n# Crea un DictWriter\ncsv_dict_writer = csv.DictWriter(output_simulato_dict, fieldnames=nomi_campi)\n\nprint(\"\n--- Scrittura con csv.DictWriter ---\")\ntry:\n    # Scrivi l'intestazione\n    csv_dict_writer.writeheader()\n    # Scrivi le righe di dati\n    csv_dict_writer.writerows(dati_dict_da_scrivere)\n    \n    print(\"Dati scritti nel file simulato.\")\n    print(\"Contenuto generato:\")\n    print(output_simulato_dict.getvalue())\nexcept Exception as e:\n    print(f\"Errore durante la scrittura CSV (DictWriter): {e}\")\nfinally:\n    output_simulato_dict.close()</code></pre>\n<p>Il modulo <code>csv</code> semplifica notevolmente la gestione di questo formato di file comune, gestendo correttamente le complessità della formattazione.</p>",
  "exercise": "<p>Questo esercizio usa <code>io.StringIO</code> per simulare l'I/O su file.</p>\n<p>1. Definisci una lista di dizionari chiamata <code>studenti</code>, dove ogni dizionario rappresenta uno studente e contiene le chiavi \"matricola\", \"nome\" e \"voto\". Esempio:</p>\n<pre><code>studenti = [\n    {'matricola': 'S101', 'nome': 'Anna Verdi', 'voto': 28},\n    {'matricola': 'S102', 'nome': 'Bruno Rossi', 'voto': 25},\n    {'matricola': 'S103', 'nome': 'Carla Neri', 'voto': 30}\n]</code></pre>\n<p>2. Definisci la lista <code>nomi_colonne = ['matricola', 'nome', 'voto']</code>.</p>\n<p>3. Simula la scrittura di questi dati su un file \"studenti.csv\" usando <code>io.StringIO</code> e <code>csv.DictWriter</code>. Assicurati di scrivere prima l'intestazione (<code>writeheader()</code>) e poi le righe di dati (<code>writerows()</code>).</p>\n<p>4. Stampa il contenuto CSV generato nell'oggetto StringIO.</p>\n<p>5. Ora, simula la rilettura del \"file\" appena creato. Riporta il \"cursore\" all'inizio (<code>seek(0)</code>).</p>\n<p>6. Usa <code>csv.DictReader</code> per leggere i dati dal file simulato e, per ogni studente, stampa una frase tipo: \"Matricola: [matricola], Nome: [nome], Voto: [voto]\".</p>",
  "defaultCode": "import csv\nimport io\n\n# 1. Lista di dizionari studenti\nstudenti = [\n    {'matricola': 'S101', 'nome': 'Anna Verdi', 'voto': 28},\n    {'matricola': 'S102', 'nome': 'Bruno Rossi', 'voto': 25},\n    {'matricola': 'S103', 'nome': 'Carla Neri', 'voto': 30}\n]\n\n# 2. Nomi colonne\nnomi_colonne = ['matricola', 'nome', 'voto']\n\n# Oggetto StringIO per simulare il file\nfile_csv_simulato = io.StringIO()\n\n# 3. Scrittura con DictWriter\nprint(\"--- Scrittura CSV Simulato ---\")\ntry:\n    writer = csv.DictWriter(file_csv_simulato, fieldnames=nomi_colonne)\n    writer.writeheader() # Scrive l'intestazione\n    writer.writerows(studenti) # Scrive i dati\n    print(\"Dati scritti con successo.\")\nexcept Exception as e:\n    print(f\"Errore durante la scrittura: {e}\")\n\n# 4. Stampa contenuto generato\nprint(\"\nContenuto CSV Generato:\")\ncontenuto_generato = file_csv_simulato.getvalue()\nprint(contenuto_generato)\n\n# 5. Riporta cursore all'inizio\nfile_csv_simulato.seek(0)\n\n# 6. Lettura con DictReader e stampa\nprint(\"--- Lettura CSV Simulato ---\")\ntry:\n    reader = csv.DictReader(file_csv_simulato)\n    for studente_dict in reader:\n        print(f\"Matricola: {studente_dict['matricola']}, Nome: {studente_dict['nome']}, Voto: {studente_dict['voto']}\")\nexcept Exception as e:\n    print(f\"Errore durante la lettura: {e}\")\nfinally:\n    file_csv_simulato.close()\n    print(\"\nFile simulato chiuso.\")"
}
